#+TITLE: Modelo Relacional
* Base de Datos
** Concepto
   Es un conjunto de datos persistentes e interrelacionados
     1. almacenados
     2. sin redundancia (ó mínimas)
** DBR
   - Colección de relaciones *normalizadas* de distintos grados
   - El grado varía con el tiempo (porque se pueden agregar/modificar/eliminar registros)
   - Es modificable, siempre que se modifique las tuplas de las relaciones (la DB sigue siendo la misma)
   - La DB no es la misma si se cambia la *definición de un dominio ó de una relación* 
  
   #+BEGIN_COMMENT
   Supongo que último item se refiere a que si se modifica una tabla ó los nombres de los atibutos (columnas)
   cuando usamos la instrucción ~ALTER~
   #+END_COMMENT
** DBMS
   - Se conoce por *Motor de Base de Datos*
   - Significa *Data Base Manager System* (Sistema de Administación/Gestión de Base de Datos)
   - Intrepreta y ejecuta comandos SQL
   - Es un progama que permite administar el contenido de una/s base/s de datos *almacenada en disco*
   - Los motores más conocidos son
     - Oracle
     - Mysql
     - PostgreSQL
     - MS Sql Server
** RDBMS
   - Significa *Relational Data Base Managment System*
* Estructura
** Conceptos
 #+NAME: termino-relacional
 |--------------------+------------------------------|
 | Término Relacional | "Equivalente" Informal       |
 |--------------------+------------------------------|
 | Relación           | Tabla                        |
 | Tupla              | Fila ó Registro              |
 | Cardinalidad       | Número de filas              |
 | Atributo           | Columna ó Campo              |
 | Grado              | Número de columnas           |
 | Clave Primaria     | Identificador Único          |
 | Dominio            | Conjunto de valores posibles |
 |--------------------+------------------------------|
** Dominio
*** Concepto
    - Es un conjunto de valores posibles que puede tener un atributo (escalares, del mismo tipo)
    - Cada atributo va a tener un dominio de valores
    - Restrigen las comparaciones (opeadores de comparación >=,<=, ==, !=, ...)
    - Los (RDBMS) motores de base de datos relacionales comerciales actuales
      - NO tienen un *chequeo* para el manejo de dominios (el usuario el que debe decidir
        cuando hay incompatibilidad entre dominios)
      - hacen *chequeo* de los tipos de datos
      - No manejan bien este concepto, porque es un concepto *semántico*
    - Es la menor *unidad semántica* de información
*** Implementación
    Consiste en la implementación de
    - Claves foráneas (permiten combinar datos de distintas Relaciones)
    - La definición de *tipos de dato de usuario* (se especifican previo a la definición de un campo)
    - Restricciones de Chequeo (Sólo del tipo de dato)
    - Definición de convenciones de nombre para los atributos *IMPORTANTE*
      (para que tengan el mismo nombre cuando estén definidos sobre el mismo dominio)
*** Ejemplo 1
     #+BEGIN_EXAMPLE
       El  dominio "NOMBRE" es el conjunto de todos los nombres posibles.
       Por tanto el conjunto de valores que aparecen en el atributo "ALU_NOMBRE" 
       de la relación "ALUMNO", es un subconjunto del dominio sobre el cual se define.
     #+END_EXAMPLE

     #+NAME: dominios-de-atributos-iguales
     #+BEGIN_SRC sql
       SELECT * FROM ALUMNO, CURSO
       WHERE CURSO.ALU_LEGAJO = ALUMNO.ALU_LEGAJO 

       -- El dominio es "LEGAJO" tanto para
       -- ALU_LEGAJO de la tabla CURSO, como para ALU_LEGAJO de la tabla ALUMNO
     #+END_SRC
 
     #+NAME: dominios-de-atributos-distintos
     #+BEGIN_SRC sql
       SELECT * FROM ALUMNO, CURSO
       WHERE CURSO.MAT_CODIGO = ALUMNO.ALU_LEGAJO

       -- Vemos que se comparan valores de dominios distintos
       -- El dominio de la tabla CURSO son los "códigos de las materias"
       -- y el de la tabla ALUMNO es el "numero de "legajo""
       --
       -- Semánticamente MAL (porque no tiene sentido)
       -- Sintácticamente BIEN (NO tiene errores Sintáxis)
     #+END_SRC
*** Ejemplo 2
    |-------------------|
    | alumno            |
    |-------------------|
    | (PK) nro_legajo   |
    | (FK) cod_regional |
    |-------------------|

    |-------------------|
    | regional          |
    |-------------------|
    | (PK) cod_regional |
    |-------------------|

    - el dominio de ~cod_regional~ sería todos los posibles valores de codigo de regionales
    - el dominio de ~nro_legajo~ serían todos los posibles valores de número de legajo
** Relación
*** Concepto
   - Una *relación* NO es una *tabla*.. Una tabla es la representación de una relación.
   - Se compone sobre un conjunto de *dominios* y se compone por
     - una cabecera
     - un cuerpo
*** Cabecera
    - Conjunto finito de atributos (/que definen las tuplas/)
    - Conjunto finito de pares ordenados atributo-dominio
    - Su cantidad es fija

    #+BEGIN_EXAMPLE
    Un ejemplo genéral podría ser
    Cabecera = {(A1;D1), (A2;D2), ..., (An;Dn)}
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    Un ejemplo donde la relación es ALUMNO, 
    El atributo ALU_LEGAJO pertenece al dominio LEGAJO,
    el atributo ALU_NOMBRE al dominio NOMBRE,
    y el atributo ALU_EDAD al dominio EDAD

    Podemos que la cabecera se podría definir como
    Cabecera = {ALU_LEGAJO, ALU_NOMBRE, ALU_EDAD}

    que a su vez representa al siguiente conjunto de pares ordenados
    {(ALU_LEGAJO; LEGAJO), (ALU_NOMBRE; NOMBRE), (ALU_EDAD; EDAD)}

    donde una componente representa al atributo, y la otra al dominio sobre el cual se define

    Recordar que el dominio LEGAJO sería el conjunto de todos los posibles legajos,
    y el dominio NOMBRE el conjunto de todos los posibles nombres,
    la relación ALUMNO estaría restringiendo el dominio, convirtiendose en un subconjunto
    #+END_EXAMPLE
*** Cuerpo
    - Conjunto de tuplas atributo-valor
    - Su cantidad puede variar, porque las *tuplas* (registros) se pueden borrar, modificar ó agregar otras

    *Obsevación:*
    Recordemos que las tuplas representan los registros ó filas de una tabla (relación),
    y su cantidad escalar se dice *cadinalidad*
** Cardinalidad
   cantidad de tuplas
** Grado
   - Es la cantidad de atributos de una *relación*
   - La cantidad de atributos NO puede variar, si se agrega ó saca atributos (columnas)
     se representando una nueva relación (concepto de Modelo Relacional)
** Tupla
   - Es un elemento de una relación (/cada fila de la tabla/)
* Propiedades de una Relación
  1. No existen en ella *tuplas repetidas*
     (por el concepto de unicidad, y que toda relación tiene *Clave Primaria*)
  2. Las *tuplas* NO están ordenadas
     (porque las tuplas son un conjunto de atributo-valor,
      y los conjuntos matemáticamente no son ordenables)
  3. Los atributos NO están ordenados
     (mismo concepto que con las tuplas por ser un conjunto,
      pero al estar en la cabecera es un conjunto de atributo-dominio)
  4. TODOS los valores de los *atributos* son *atómicos*
     (por tanto está *Normalizada*)
* Tipos de Relaciones
** Relaciones base
   - Son las tablas
   - Tiene existencia *permanente*
   - Es parte de la base de datos (los datos)
** Vistas
   - Se pueden nombrar
   - Son relaciones *virtuales*
   - Se definen en base a otras relaciones
** Instantáneas (Snapshots)
   - Se pueden nombrar
   - Se definen en base a otras relaciones
   - Los datos se almacenan (copian) en la base
** Resultados de Consultas (Queries)
   - Se pueden nombrar
   - NO son de existencia *permanente*
** Resultados intermedios de consultas (Subqueries)
   - NO se pueden nombrar
   - NO son de existencia *permanente*
** Relaciones temporales
   - Son tablas temporales
   - Se pueden nombrar
   - Se destruye de forma automática en algún momento
* Integridad
** Atributos Clave
*** Conceptos
    - La (PK) *clave primaria* y (FK) *clave foránea* están definidas sobre el mismo *dominio*
*** Clave Candidata
**** Concepto
     Es el conjunto de atributos que cumplan con las condiciones de
     1. Unicidad
     2. Minimalidad
**** Unicidad
     - Promete la no repetición del valor de un atributo
**** Minimalidad
     - Promete que será mínima la combinación de atributos que cumplan unicidad
     - El cada subconjunto de atributos debe cumplir con unicidad
     - Si al sacar un atributo del conjunto, y sigue cumpliendo con *unicidad*
       entonces ese conjunto no cumplía con *minimalidad*,
       porque *la combinación de atributos* debe cumplir con *unicidad*
       =osea todas las posibles componentes que formemos deben cumplir unicidad=
*** (PK) Clave Primaria
    - Identifica unívocamente a cada fila/registro
    - Surje del conjunto de *claves candidatas*
    - Es elegida por el diseñador (según su criterio, experiencia ó del negocio)
    - Entra el concepto de [[Regla de integridad de las entidades][*Integridad de las entidades*]]
      - ninguno de sus componentes/elementos puede ser *nulo*
      - *componente* porque la clave puede ser *compuesta* (2 ó más atributos)
*** Clave Alterna/Alternativa
    Son las *claves candidatas* que no fueron elegidas como *primaria*
*** (FK) Clave Foránea
    - Permite la combinación de datos de distintas relaciones R1, R2,.. (/pueden no ser distintas R1, R2,.../)
    - Si las relaciones son iguales (R1=R2) => Existe una *relación autoreferencial*
    - Es un conjunto de atributos (/1 ó más/) de una R1 que debe coincidir con los de la (PK) *clave primaria*
      de la *relación referenciada* R2 (/se relaciona con la PK de otra tabla/)
    - Pueden formar o no parte de la *clave primaria*
    - El valor de los atributos puede ser.. todos nulos ó todos NO nulos (pero sólo uno u otro)
    - +A veces deben aceptar *nulos* (Ej. una relación *autoreferencial*)+ <---
    - Entra el concepto de [[Regla de integridad referencial][*Integridad Referencial*]] 
      - si una FK hace referencia a una PK, esta PK debe existir
      - que a su vez usa el concepto de *Integridad de las entidades*
      - y se debe determinar que acciones tomar para NO romper la *integridad referencial*
        (porque las FK de una manera brusca, al relacionar con otras entidades, puede hacer que se borren
        o modifiquen los registros de otras tablas)

     #+BEGIN_QUOTE
     La clave foránea puede ser *compuesta* digamos que fuese ~{cod_provincia, cod_localidad}~
     se debe cumplir que para cada atributo de la clave sean
     1. no nulos (ambos)
     2. ó nulos (uno u otro)

     Se debe cumplir alguna de las dos condiciones => caso contrario, se rompe la *regla de integridad referencial*
     #+END_QUOTE
** [TODO] Reglas de Integridad
*** [TODO] Conceptos
    Definir reglas permite que los datos sean
    1. Integros <---- (???)
    2. Consistentes
*** Regla de integridad de las entidades
    - Ningún *componente* de la (PK) *clave pimaria* de una relación base puede aceptar el valor *nulo*
    - Se refiere a *componente* porque puede ser una *clave compuesta* (por 2 ó mas atributos)
*** Regla de integridad referencial
**** Concepto
     - Se implementa en la *FK*
     - Cada valor de una *clave foránea* debe existir como valor en la *clave primaria* de otra relación
       ó ser desconocido (/ser desconocido se refiere al valor nulo NULL/)
     - Permite mantener un estado consistente de la base de datos
     - Es el Diseñador quien define la forma en que la *DBMS* manejará la *integridad referencial*

      #+BEGIN_EXAMPLE
      Si A hace referencia a B => B debe existir
   
      B existe por la *regla de integridad de entidades* (existencia de la clave primaria)
      #+END_EXAMPLE
**** Aspectos que debe contemplar el diseñador
     - Si la *clave foránea* acepta nulos
     - La acción a realizar si se *elimina* un registro que tiene una *clave primaria* referenciada 
       por una *clave foránea* de otra *relación*
       1. *RESTRICT:* NO se deja eliminar el registro padre (al que hace referencia)
       2. *CASCADE:* Se elimina ese registro, y los registros que la referencian
       3. *SET NULL:* Se le asigna NULO a todas las Claves Foráneas (la clave foránea debe permitir nulos)
     - La acción a realizar si se intenta *modificar* la *clave primaria* de un registro referenciado
       1. *RESTRICT:* NO se deja modificar el registro padre (al que hace referencia)
       2. *CASCADE:* Se modifican también las Claves Foráneas que la referencian
       3. *SET NULL:* Se le asigna NULO a todas las claves Foráneas (la clave foránea debe permitir nulos)

     *Observaciones:*
     - Las acciones que se realizan se definen mediante *TRIGGERS*
     - La regla por default es *restrict* (/no permite eliminar/modificar/)

     #+BEGIN_EXAMPLE
     Un ejemplo de una "clave foránea" que acepta nulos.

     Una entidad Materia, que aún no tiene un profesor asignado,
     por tanto su "numero de legajo" no aparece en la tupla
     (MATERIA_COD, MATERIA_NOMBRE, PROF_LEGAJO)
     
     Otro ejemplo sería si.. una Regional de una Universidad desaparece,
     que todos los alumnos que tenían una referencia a ella, tengan el valor NULL
     en la referencia.

     Observación: NO se puede dar que la clave primaria "MATERIA_COD" sea nula
     por la "regla de integridad de entidades"
     #+END_EXAMPLE
**** Ejemplos
     #+BEGIN_EXAMPLE
     Si intentamos eliminar un registro (tupla) de (ALUMNO) que tiene una Clave Primaria (ALU_LEGAJO, ALU_DNI)
     referenciada por una Clave Foránea (ALU_COD) de otra Relación (INSCRIPCION)

     podemos decidir si eliminar al alumno, y todas sus inscripciones (CASCADA)
     ó que NO se pueda eliminar al alumno (RESTRICT)
     ó asignarle NULO a todas las inscripciones (ANULACION) mmmh (????)
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
     Si intentamos modificar la clave primaria de PRODUCTO (entidad) que está referenciado
     por PEDIDO (otra entidad) podemos optar por 

     NO permitir la modificación
     ó modificar el COD_PROD (clave foránea, porque referencia a PEDIDO) de cada registro de PEDIDO (otra entidad)
     ó asignarle NULO a todos los registros de PEDIDO que hagan referencia a esa clave primaria
     #+END_EXAMPLE
*** Regla de negocios ó comerciales
    - Cada organización define sus reglas de negocio en función a sus objetivos
    - Son específicas de cada empresa
* Reglas de CODD
** Conceptos
  - Aseguran que un motor de BD sea *relacional*
  - Edgar Codd es quien dijo que una Relación se conforma por un cuerpo, cabecera, etc..
  - Las *reglas de integridad* deben estar en la *relación base*, no en programas de aplicación
  - Aseguran la *independencia* entre
    - el motor de base de datos
    - los programas que acceden a los datos
  - Soportar información faltante mediante *valores nulos* (~NULL~)
  - Ofrecer lenguajes para
    1. Definición de datos (DDL)
    2. Manipulación de datos (DML)
** Independencia de datos
*** Independencia lógica
    que uno podria hacer cambios a nuestra db
    no deberia afectar nuestra app 
    (podria afectar, aunque no al 100%)

    anteriormente antes de las RDB, las apps
    debian tener cargadas las estructuras de la DB
    y si algo cambiaba en la DB, la app fallaba

    #+BEGIN_EXAMPLE
    la app es un buscador de alumnos
    
    si en la DB agrego nuevos atributos (edad, fecha de nac)
    en la entidad alumnos
    eso no deberia afectar la app
    #+END_EXAMPLE
*** Independencia física
    (si modificamos el indice, etc...)
    tampoco deberia afectar a la app
* Algebra Relacional
** Concepto
   - Lo definió Edgar Codd
   - Conjunto de operaciones sobre las relaciones (tablas)
   - Permite operar distintas relaciones entre ellas
   - Cada operación relacional
     - opera sobre 1 ó 2 tablas (actúan como operandos)
     - tienen de resultado una *nueva relación*
** Clasificación de Operadores 
*** Operadores Tradicionales
    Son los comunes utilizados en álgebra
**** Operador Unión (U)
     - va a tener la cabecera de la primera relación
     - Si dos relaciones tienen misma *cabecera* (cant. de atributos) => son *compatibles*
     - La unión de dos relaciones *compatibles* ~A, B~ es el conjunto de TODAS las *[[Tupla][tuplas]]* de ambas relaciones
**** Operador Intersección
     - La intersección de dos relaciones *compatibles* en la *UNIÓN* A y B,
       es el conjunto de todas las [[Tupla][tuplas]] que pertenecen a ambas relaciones
**** Operador Diferencia (-)
     - La diferencia de dos relaciones A y B, es el conjunto de [[Tupla][tuplas]] que pertence a A pero no a B
**** Operador Producto Cartesiano (x)
     - El producto de dos relaciones A y B, es la concatenación de las tuplas de A y B
     - Es una operación costosa para la DB
     - el *grado* de A X B, es la suma de los grados de A y B (/siendo A y B relaciones/)
     - La *cardinalidad* será el producto 
*** Operadores Especiales
**** Conceptos
    Están orientados al manejo de *relaciones*, y forman el *algebra relacional*
    - select
    - project
    - join
    - división (%)
**** Operador Select
     - Toma un *subconjunto horizontal* de una relación específica (toma todas las columnas)
     - El resultado es otra tabla con los mismos atributos que la tabla original
     - NO tiene que ver con el operador ~select~ de SQL
     - evalúa un conjunto de *tuplas* que cumplan cierta condición
     - devuelve una nueva relación 
     - filtra tuplas

    #+BEGIN_QUOTE
    ~SELECT (A) Ciudad ='Paris'~

    nos trae un conjunto de tuplas que cumpla con una condición específica
    #+END_QUOTE

      #+NAME: tabla-A
      |----+---------+---------|
      | A  | NombreA | CiudadA |
      |----+---------+---------|
      | A1 | Carlos  | Paris   |
      | A2 | Sabina  | Londres |
      |----+---------+---------|

      Si hacemos un Select CiudadA='Paris' nos quedaría

      |----+---------+---------|
      | A  | NombreA | CiudadA |
      |----+---------+---------|
      | A2 | Sabina  | Londres |
      |----+---------+---------|
**** Operador Project 
     - Toma un *subconjunto vertical* de una relación, al seleccionar los atributos especificos
     - El resultado es otra tabla es una nuva tabla con los atributos seleccionados
     - Devuelve una nueva relación
     - Elige un conjunto de atributos que queramos
     - Filtra *atributos*

    #+BEGIN_QUOTE
    ~Project  (A) nombA, CiudadA~
    
    ~PROJECT (SELECT (A) Ciudad='Paris') nombA~

    Por ejemplo filtramos las tuplas por las cumplan esa condicion (que ciudad sea paris)
    y de ese resultado hacemos un project
    #+END_QUOTE

      #+NAME: tabla-A
      |----+---------+---------|
      | A  | NombreA | CiudadA |
      |----+---------+---------|
      | A1 | Carlos  | Paris   |
      | A2 | Sabina  | Londres |
      |----+---------+---------|

      Si hacemos un Project CiudadA
      
      |----+---------|
      | A  | CiudadA |
      |----+---------|
      | A2 | Londres |
      |----+---------|
**** Operador División
    ~A % B~ son los valores que no están en B y que se relacionan con todos los valores de A
**** Operador Join
     - El resultado es una nueva tabla donde cada renglon se forma 
       *concatenando dos renglones que tengan el mismo valor de atributo*
     - Si la condición que se define es *la igualdad* entre valoes de la columna en común,
       entonces la nueva tabla contiene dos columnas idénticas
    
     *Observación:*
     Una de las columnas repetidas se puede eliminar
     - aplicando el *Operador Project*
     - utilizando el *natural join* (parece ser la manera adecuada)
     - Matchea *tuplas* a partir de una igualdad (/del atributo/)
     - Hace como un *producto cartesiano* pero solo para los *atributos* que matchee
     - Es una operación costosa (/por lo del producto cartesiano/)
** Ejemplos
*** Ejemplo 1
     ~PROJECT (SELECT (SPJ) J#='J1') S#~

     agarra todas las tuplas de SPJ que cumplan con esa condicion y muestra solo el atributo S#

     |----|
     | S# |
     | S1 |
     | S2 |
     |----|
*** Ejemplo 2
     se puede usar los operadores tradicionales

     ~PROJECT ( SELECT (SPJ) J#='J1' )~
*** Ejemplo 3
     ~PROJECT JNAME (JOIN (SELECT (SPJ) S#='S1') J#)~

     *Descripción:*
     1. agarramos todas las tuplas que cumplan con  la condición donde S# tenga como valor S1
     2. hacemos un producto cartesiano el resultado anterior con J, y devuelve los datos de J 
        donde los datos sean similares
     3. mostramos solo el atributo JNAME 

     *Observación:*
     Se recomienda hacer primero el select, y luego hacer el join.
     porque el join puede ser mas costoso, por el tema del producto cartesiano
     evaluaria demasiadas tuplas
* Glosario
** Nulo
   - Es la *ausencia de valor* para un atributo que pertenezca al conjunto dominio
     sobre el cual está definido
   - NO se representa únicamente por valo NULL, puede ser una cadena en blanco,
     o cualquier valor que no genere valor en el dominio sobre el cual está definido

** Tipos de datos del usuario
   - Se pueden definir en las últimas versiones de motores de base de datos
   - Se acerca al concepto de *dominio*
   - Al definir el campo en la Tabla, se hace referencia a ese tipo de dato

   #+BEGIN_EXAMPLE
   Definimos el tipo de datos "COD_PROVINCIA"
   - númerico
   - entero
   - de dos posiciones
   - valores definidos entre 1 y 24
   #+END_EXAMPLE
