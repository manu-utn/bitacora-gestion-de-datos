#+TITLE: Clase 07 - Triggers
* Conceptos
  - Un *trigger* aguarda un evento determinado y ejecuta una sentencia sql de forma automática
  - Se ejecuta cuando ocurre un evento (/Ej. delete, insert, update, ../)
  - Es fundamental definir
    1. Sobre que objeto (tablas, vistas)
    2. El momento (before, after)
    3. El tipo de evento (update, delete, insert)

  #+BEGIN_COMMENT
  Pendiente a revisar

  *Observaciones:*
  - Los triggers utilizan como variables internas ~inserted~ y ~deleted~
  - Se utiliza ~from inserted~ cuando la operación fue
    1) insert
    2) ó update
  - Se utiliza ~from deleted~ cuando la operación fue
    1) delete
    2) ó update
   #+END_COMMENT

  |---------+--------------------+-----------------------+----------|
  | Eventos | Variables Internas | Acciones              | Momentos |
  |---------+--------------------+-----------------------+----------|
  | Insert  | Inserted           | Insert                | Before   |
  | Update  | Deleted            | Update                | After    |
  | Delete  |                    | Delete                |          |
  |         |                    | Exec stored procedure |          |
  |         |                    | Exec function         |          |
  |         |                    | Bloque anónimo        |          |
  |---------+--------------------+-----------------------+----------|
* Eventos posibles
** DML en tablas o views
   Recordemos que *DML* son las siglas de *Data Manipulation Language* y esto engloba a todas las 
   instrucciones que nos permiten manipular los datos. (Delete, Insert, Update)

   |--------------------------------------------------+--------------------------------------------------|
   | (Eventos) Instrucciones *DML* sobre Tablas/Views | Descripción                                      |
   |--------------------------------------------------+--------------------------------------------------|
   | INSERT ON nombreTabla                            | Insertar un registro                             |
   | DELETE FROM nombreTabla                          | Borrar algún registro                            |
   | UPDATE nombreTabla                               | Actualizar algún registro                        |
   | UPDATE OF nombreColumna ON nombreTabla           | Actualizar alguna columna                        |
   |--------------------------------------------------+--------------------------------------------------|
** DDL en db (oracle, sql server)
   La sigla *DDL* hace referencia a *Data Definition Language* y es el conjunto de operaciones necesarias
   para defini las estructuras de datos, en donde se van a persistir. (create, alter, drop)
* Operaciones
  Se puede tener un log de los eventos, para saber que operaciones se hicieron
  (/Ej. como auditoría para controlar al personal/)

  *Observación:*
  Es importante que la tabla a la que especifique el *trigger* esté en *modo local*
  ya que NO todos los motores aceptan tablas en servidores remotos (externos)

  |-------------+--------------------------------------|
  | Operación   | Descripción                          |
  |-------------+--------------------------------------|
  | LOGON       | Para saber si alguien se logea       |
  | LOGOFF      | Para saber que usuario se desconecta |
  |-------------+--------------------------------------|
  | STARTUP     |                                      |
  | SHUTDOWN    |                                      |
  |-------------+--------------------------------------|
  | SERVERERROR |                                      |
  |-------------+--------------------------------------|
* Evento y acción como Transacción
** Conceptos
  Los *eventos* y las *acciones* que ejecutan los *triggers*
  - Representan una ~transaction~ (una o varias instrucciones que se ejecutan como una sola)
  - Si alguno falla, se realiza un ~rollback~ automáticamente
** Ejemplos
   #+BEGIN_SRC sql
     DROP TRIGGER stateUpdateAudit

     CREATE TRIGGER stateUpdateAudit ON state
     AFTER update AS
     BEGIN
       INSERT INTO state_upd
       SELECT state,sname,'A',getdate()
       FROM deleted;

       -- INSERTO UN NULO EN LA TABLA STATE_UPD FORZANDO ERROR
       INSERT INTO state_upd
       SELECT null,sname,'N',getdate()
       FROM inserted;
     END

     UPDATE state SET sname='AZ...' WHERE state='AZ'
   #+END_SRC
* Momentos de ejecución de acciones
** Conceptos
  Recordemos que las *acciones* son el conjunto de operaciones que engloba *DML* (insert, delete, update)
  para manipular los datos.
  
  *Observaciones:*
  - Las mas relevantes son ~instead of~ y ~after~ ya que son las utilizadas por *SQL Server*
  - Se pueden utilizar los en triggers sobre *tablas* y *views*

  |----------------------+------------------------------------------------------------------|
  | Momento de ejecución | Descripción                                                      |
  |----------------------+------------------------------------------------------------------|
  | INSTEAD OF           | Se ejecutan las acciones en vez del evento del trigger           |
  | AFTER                | Se ejecutan las acciones luego de ocurrido el evento del trigger |
  |----------------------+------------------------------------------------------------------|
  | BEFORE               | Las acciones se ejecutan antes que el evento del trigger         |
  | FOR EACH ROW         |                                                                  |
  |----------------------+------------------------------------------------------------------|
* Tablas/Vistas del Diccionario de Datos
  La información de la *metadata* de todos los *db objects* aparecen en las siguientes *tablas*

  |---------------------+----------------------------------------------------------------|
  | Tabla               | Información que contiene                                       |
  |---------------------+----------------------------------------------------------------|
  | sys.triggers        | Datos sobre cada *trigger*                                     |
  |---------------------+----------------------------------------------------------------|
  | sys.objects         | Contiene datos sobre todos los *objetos*                       |
  |                     | (nombre, esquema al que pertenece, tipo de objeto, descripcion |
  |                     | fecha de creación/modificación)                                |
  |---------------------+----------------------------------------------------------------|
  | sys.all_sql_modules | Contiene la definición de cada *objeto*                        |
  |---------------------+----------------------------------------------------------------|
  | sys.procedures      | Datos similares a ~sys.objects~                                |
  |                     | Contiene mas detalles sobre los *procedimientos*               |
  |---------------------+----------------------------------------------------------------|

 *Observaciones:*
 - El término *metadata* hace referencia al conjunto de datos que describen el contenido de
   un recurso, de archivos, etc.. Es información que describe otros datos.
 - Los *objetos en una base de datos* son:
* Ejemplos
** Ejemplo 1
  #+BEGIN_SRC sql
    create trigger actualizarAuditoria
    on nombre_tabla
    after update
    BEGIN INSERT INTO state_upd
    select state from inserted
    END
    -- falta  codigo

    DROP TRIGGER actualizarAuditoria

    SELECT * FROM SYS.TRIGGERS

    -- muestra todos los objetos de la base de datos
    SELECT * FROM SYS.OBJECTS


    SELECT * FROM SYS.OBJECTS where OBJECT_ID=numero

    -- muestra la metadata del objeto
    SELECT * FROM SYS.ALL_SQL_MODULES where OBJECT_ID=numero
  #+END_SRC
** Ejemplo 2
  #+BEGIN_SRC sql
    -- si queremos agregar una columna en la tabla orders
    ALTER TABLE orders ADD total DECIMAL(12,2);

    -- 1. creamos una tabla temporal (?)
    SELECT order_num, SUM (quantity*precio) totalItems
    into #ordenes
    FROM items GROUP BY order_num;

    -- 2. modificaos todos los registros, la columna total
    -- en base a la tabla temporal
    UPDATE orders o
    SET total=(SELECT totalitems FROM #ordenes o2
	 WHERE orders.order_num=o2.order_num)

    -- 3. trigger
  #+END_SRC
* Parte practica
 #+BEGIN_SRC sql
   USE stores7new;

   /** Ejecicio 1 **/
   CREATE TABLE Products_historia_precios(
   Stock_historia_Id int IDENTITY(1,1,) PRIMARY KEY,
   stock_num smallint,
   manu_code char(3),
   fechaHora datetime,
   usuario varchar(20),
   unit_price_old decimal(6,2),
   unit_price_new decimal(6,2),
   estado char DEFAULT 'A' CHECK(estado IN ('A', 'I'))
   );

   -- borramos por si ya estaba
   DROP TRIGGER cambio_precios_TR;
   -- creamos trigger en la tabla products
   CREATE TRIGGER cambio_precios_TR ON products
   -- cuando ocurra un update
   AFTER UPDATE AS
   BEGIN
   -- insertamos multiples registros
   -- hacemos INSERT nombre_tabla (campo1, campo2) SELECT (campo1, campo2) FROM 
   INSERT INTO Products_historia_precios
    (stock_num, manu_code, unit_price_old, unit_price_new, fechaHora, usuario)
    SELECT i.stock_num, i.manu_code, d.unit_price, i.unit_price, getdate(), current_user
    -- la tabla donde se hizo el INSERT
    FROM inserted i JOIN deleted d
    ON i.stock_num = d.stock_num AND i.manu_code = d.manu_code
   END

   -- hacemos un cambio para que se ejecute
   UPDATE products SET unit_price = 400
   WHERE stock_num = 1 AND manu_code = 'HRO';
   -- chequeamos si el trigger se ejecuto
   SELECT * FROM Products_historia_precios;


   /** Ejecicio 2**/
   -- Creamos un trigger captura el delete
   CREATE TRIGGER delete_stock_histoia ON products_historia_precios
   INSTEAD OF DELETE AS
   BEGIN
	   DECLARE @stock_historia_id int
	   -- declaramos el cursor
	   DECLARE stock_historia_borrado CURSOR FOR
		   SELECT stock_historia_id FROM deleted
		
	   -- abrimos el cursor, para poder leerlo
	   OPEN stock_historia_borrado
	
	   -- lee la primera fila
	   FETCH NEXT FROM stock_historia_borrado
	     INTO @stock_historia_id --

	   -- si no llego al final del cursor
	   -- cuando no haya mas registros se detiene
	   WHILE @@FETCH_STATUS = 0 
	   BEGIN
		   UPDATE products_historia_precios
		   SET estado = 'I' WHERE stock_historia_id = @stock_historia_id

		   -- chequeamos si hubo otro registro borrado
		   FETCH NEXT FROM stock_historia_borrado 
		     INTO @stock_historia_id -- y guardo el historia_id
	   END 
	   CLOSE stock_historia_borrado -- cerramos el cursor
	   -- borra el cursor en la zona de memoria
	   DEALLOCATE stock_historia_borrado --
   END;
	
 #+END_SRC

