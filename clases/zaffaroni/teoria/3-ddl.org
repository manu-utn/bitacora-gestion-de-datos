#+TITLE: DDL - Data Definition Language
#+STARTUP: inlineimages
* SQL
  - Las siglas *SQL* hacen referencia a *Structured Query Language*
  - Es un (DBMS) *motor de base de datos* que incorpora un (DDL) *lenguaje de definición de datos*
  
  *Observación:*
  Una de las *reglas de CODD* impone que un (DBMS) *Data Base Managment System* (/motor de db/) debe tener
  - un (DDL) *lenguaje de definición de datos* (/CREATE, ALTER, .../)
  - un (DML) *lenguaje de manipulación de datos* (/SELECT, INSERT, UPDATE, DELETE, .../)
  - un (TCL) *lenguaje de control de transacciones* (/COMMIT, ROLLBACK/) <----
  - un (DCL) *lenguaje de control de datos* (/GRANT, REVOKE/) <---

  DCL
  - GRANT: permite otorgar permisos
  - REVOKE: elimina los permisos otorgados

  #+BEGIN_SRC plantuml :exports results :file img/instrucciones-sql.png
    @startuml

    title SQL Instrucciones
    top to bottom direction 

    note as N1
    ,* SQL: Structured Query Language
    ,* DML: Data Manipulation Lenguaje
    ,* DDL Data Definition Language
    ,* TCL: Transactional Control Language
    endnote

    note as SQL
    Instrucciones-SQL
    endnote

    note as DDL
    DDL
    ,* CREATE
    ,* ALTER
    ,* DROP
    ,* TRUNCATE
    endnote

    note as DML
    DML
    ,* SELECT
    ,* INSERT
    ,* UPDATE
    ,* DELETE
    endnote

    note as TCL
    TCL
    ,* COMMIT
    ,* ROLLBACK
    endnote

    DDL -up-> SQL
    DML -up-> SQL
    TCL -up-> SQL

    @enduml
  #+END_SRC

  #+RESULTS:
  [[file:img/instrucciones-sql.png]]

* Dominio
** Concepto
   Es el *conjunto de valores posibles* que puede tener una columna de una tabla
   (con columna decimos un campo/atributo)
** Implementación
   El *dominio* en una base de datos se implementa con
   - Nombres (de columna)
   - Tipos (de datos de las columnas/atributos/campo)
   - Constraints (restricciones)
*** Tipo de datos
    |-----------------------------|
    | Tipo de dato                |
    |-----------------------------|
    | int                         |
    | date                        |
    | smallint                    |
    | varchar(unEntero)           |
    | decimal(unEntero, unEntero) |
    |-----------------------------|
*** Constraints
   |------------+-----------------------------------------------------------------|
   | Constraint | Descripción                                                     |
   |------------+-----------------------------------------------------------------|
   | NULL       | Verifica que la columna pueda tener valor nulo (no tener valor) |
   | NOT NULL   | Verifica que la columna debe tener datos (osea no nulo)         |
   | CHECK      | Verifica que se cumpla una condición en una columna             |
   | DEFAULT    |                                                                 |
   |------------+-----------------------------------------------------------------|

   #+BEGIN_SRC sql
     /*
     * Si NO se cumplen los CHECK,
     * entonces no se puede ingresar ese registro a la tabla
     */
     CREATE TABLE pedidos(
     numero int PRIMARY KEY,
     numeroB int UNIQUE,
     -- el atributo 'sexo' puede ser nulo
     -- pero si NO es nulo, entonces solo puede ser el caracter F ó M
     sexo char null CHECK (estado in ('F', 'M')),
     -- el valor de la edad debe ser mayor a 18
     edad int CHECK( edad > 18)
     );
   #+END_SRC
* Tablas
** Concepto
   - Es la *unidad básica de almacenamiento de datos*
   - Son de existencia *permanente* (/persiste en disco/)
   - Poseen un identificador único por *esquema* ó *base de datos*
   - Los datos se guardan en filas/columnas
   - Cada columna puede tener
     - nombre
     - tipo de dato
     - un ancho/longitud (/que varía según el tipo de dato/)
** Tabla Maestra Vs Tabla Transaccional Vs. Tabla Paramétrica
*** Tabla Maestra
    1. Aplican el concepto *ABM* (Alta-Baja-Modificación)
    2. Es el usuario quien ingresa los datos

    #+BEGIN_QUOTE
    Un ejemplo de tablas maestras sería *CLIENTE*, *PEDIDO*, *ALUMNO*, *MATERIA*, ..
    estas necesitas un alta-baja-modificación
    #+END_QUOTE
*** Tabla Transaccional
**** Conceptos
     - Se generan a través de *tablas maestras* y de la interacción entre *tablas maestras*
     - NO es el usuario quien ingresa los datos. Es el Sistema quien carga los datos, según las *reglas de negocio* (/la lógica/)
     - NO las crea los usuarios, si no que surjen a través de *transacciones* que realiza el sistema
**** Ejemplo - Descriptivo
     #+BEGIN_QUOTE
     Por ejemplo una tabla transaccional podría ser *FACTURA*
     que surje cuando *CLIENTE* interactúa con *PRODUCTO* (/ambas son "tablas maestras"/)
    
     y su interacción hace que generemos una *factura*
     que tiene un *cliente*, y muchos *productos*    
     #+END_QUOTE

     #+BEGIN_QUOTE
     Otra tabla transaccional podría ser *ITEM_FACTURA*
     que surje de la relación entre la *factura* y los *productos*

     donde un *item_factura* tiene un producto y pertenece a una *factura*
     #+END_QUOTE
**** Ejemplo - Diagrama Entidad-Relación
    #+BEGIN_SRC plantuml :file img/tabla-transaccional.png :exports results
      @startuml
      title DER - Tablas Maestras - Tabla Transaccionales
      hide circle
      skinparam linetype ortho

      note as N1
      ,**Tablas Transaccionales:**
      ,* Factura
      ,* Renglon_Factura

      Las genera el sistema a través de transacciones
      según las reglas de negocio
      (interacción entre las entidades/tablas)

      --

      ,**Tablas Maestras:**
      ,* Cliente
      ,* Producto

      Es el usuario quien ingresa los datos, y aplican
      el concepto de ABM (Alta-Baja-Modificación)
      endnote

      ''''''''''''''''''''''''''''''''''
      '' ENTIDADES

      entity "Factura" as factura {
          factura_tipo: char(1)
          factura_sucursal: char(4)
          factura_numero: char(8)
          --
          factura_fecha: smalldatetime
          factura_total: decimal(12,2)
          factura_cliente: char(6) <<FK>>
      }

      entity "Renglon_Factura" as renglon_factura{
          renglon_tipo: char(1) <<FK>>
          renglon_sucursal: char(4) <<FK>>
          renglon_numero: char(8) <<FK>>
          --
          cantidad: int
          precio: decimal(12,2)
          producto: char(8) <<FK>>
      }

      entity "Cliente" as cliente {
          cliente_codigo: char(6)
          --
          cliente_telefonno: char(100)
          cliente_domicilio: char(100)
      }


      entity "Producto" as producto {
         producto_id: char(8)
         --
         producto_detalle: char(50)
         producto_precio: decimal(4,2)
         producto_rubro: char(4) <<FK>>
         producto_envase: numeric(6) <<FK>>
      }


      ''''''''''''''''''''''''''''''''''
      '' RELACIONES

      factura ||.down.|{ renglon_factura

      cliente |o.right.o{ factura

      renglon_factura }o.left.|| producto

      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/tabla-transaccional.png]]
*** Tabla Paramétrica
**** Conceptos
     - Es una *tabla maestra* que sirve para paramétrizar *tablas maestras*
     - Son tablas que *permiten parametrizar atributos* de otras tablas
**** Ejemplo - Descriptivo
     #+BEGIN_QUOTE
     Supongamos que tenemos la tabla *PRODUCTO* que tiene como atributos
     1. (PK) *producto_codigo*
     2. producto_detalle
     3. producto_precio
     4. (FK) ~producto_rubro~
     5. (FK) ~producto_envase~

     Podemos crear dos *tablas parámetricas* que también son *tablas maestras* (/permiten ABM/)
     1. *RUBRO:* para parámetrizar los productos en diferentes rubros (/Ej. lacteos, verduras, .../)
     2. *ENVASE:* para parametrizar los producos en función a su envase de presentación

     Finalmente las relaciones entre las dos *tablas paramétricas* y *PRODUCTO* quedaría..
     1. ~1 a N~: Un producto puede tener un envase, y un envase puede estar en muchos productos
     2. ~1 a 1~: UN producto tiene un rubro, y un rubro tiene un producto
     #+END_QUOTE
**** Ejemplo - Diagrama Entidad-Relación
     #+BEGIN_SRC plantuml :file img/tabla-parametrica.png :exports results
       @startuml
       title DER - Tablas Maestras - Tabla Parámetrica
       hide circle
       skinparam linetype ortho

       ''''''''''''''''''''''''''''''''''
       '' ENTIDADES

       entity "Producto" as producto {
           producto_id: char(8)
           --
           producto_detalle: char(50)
           producto_precio: decimal(4,2)
           producto_rubro: char(4) <<FK>>
           producto_envase: numeric(6) <<FK>>
       }

       entity "Envase" as envase{
           envase_codigo: numeric(6)
           --
           envase_detalle: char(50)
       }

       entity "Rubro" as rubro{
           rubro_id: char(4)
           --
           rubro_detalle: char(50)
       }


       ''''''''''''''''''''''''''''''''''
       '' RELACIONES

       producto }o..o| envase
       producto |o..o| rubro

       @enduml
     #+END_SRC

     #+RESULTS:
     [[file:img/tabla-parametrica.png]]

** Sintáxis en SQL
   #+BEGIN_SRC sql
     CREATE TABLE clientes(
            dni INT NULL,
            nombre VARCHAR(20) NULL,
            edad SMALLINT NULL,
            alta DATETIME NULL
     );
   #+END_SRC
* Alter
** Conceptos
   - ~ALTER~ permite alterar una columna de una tabla (agregar/eliminar/cambiar tipo)
   
   #+BEGIN_QUOTE
   Si la tabla que queremos alterar ya tiene registros, y queremos modificar el *tipo de una columna*
   el nuevo tipo de dato debe ser de un tamaño mayor al anterior, caso contrario el motor lanzará 
   una excepción.

   Ej. Si era ~nombre CHAR(30)~ y la tabla ya tenía datos,
   es posible que NO podamos hacer ~ALTER COLUMN nombre CHAR(20)~

   *Posible solución:*
   Crear un nueva columna, pasarle los datos a esta
   #+END_QUOTE

   |-------------------------------------------------------------+---------------------------------------|
   | INSTRUCCIÓN                                                 | DESCRIPCION                           |
   |-------------------------------------------------------------+---------------------------------------|
   | ~ALTER TABLE nombre_tabla ADD nombre_columna~               | agrega una columna                    |
   |-------------------------------------------------------------+---------------------------------------|
   | ~ALTER TABLE nombre_tabla DROP COLUMN nombre_columna~       | elimina una columna                   |
   |-------------------------------------------------------------+---------------------------------------|
   | ~ALTER TABLE nombre_tabla ALTER COLUMN nombre_columna TIPO~ | cambiar el tipo de dato de la columna |
   |-------------------------------------------------------------+---------------------------------------|
** Sintáxis en SQL
   #+BEGIN_SRC sql
     ALTER TABLE cliente ADD cliente_provincia INT NULL;

     ALTER TABLE cliente DROP COLUMN cliente_provincia INT NULL;

     ALTER TABLE cliente ALTER COLUMN cliente_provincia CHAR(10) NULL;
   #+END_SRC
* Constraints
** Conceptos
   - En español significa *restricciones*
   
   #+BEGIN_QUOTE
   Por lo general el proceso de creación de tablas mediante scripts, es
   1. crear las tablas sin PK, ni FK
   2. luego se agregan las PK
   3. luego se crean las FK haciendo referencia a las PK

   Si llegamos a hacer el paso (2) (3) de forma inversa, lanzaria una excepción
   porque estaríamos rompiendo la regla de integridad referencial
   al asociar una FK que NO existe
   #+END_QUOTE
** (PK) Primary Key Constraint
*** Conceptos
   + Representa de forma unívoca a cada fila/registro (/lo fija la "regla de integridad de entidad"/)
   + Puede estar formada por 1 o más columnas (/si tuviese muchas columnas es una "clave compuesta"/)
   + NO puede aceptar valores nulos (/lo determina la "regla de integridad de entidad"/)
   + Se utiliza el concepto de [[Integridad de Entidad][Integridad de Entidad]]

   #+BEGIN_QUOTE
   Qué sucede cuando creamos una tabla con una (PK) ?

   Cuando se crea una tabla, y se le define una (PK), el motor crea un *índice*
   que es una *estructura adicional* para tener un acceso rápido por esa columna/s

   entonces por cada ~INSERT~ de un nuevo registro, el motor hace *dos accesos a disco para escritura*
   1. un acceso a disco para la *tabla inicial* donde se definió la (PK)
   2. un segundo acceso a disco para la *estructura del índice*
   #+END_QUOTE
*** Crear PK - Sintáxis en SQL
    Supongamos que tenemos una entidad Pedidos, que tiene varios items.

    *Observación:*
    Recorda que la Clave Foránea va en la entidad que tiene el modalidad Muchos

    #+BEGIN_SRC sql
      /*
      ,* Restricción a nivel de Columna
      ,*/
      CREATE TABLE pedidos(
             cod_pedido        INT PRIMARY KEY, -- ACA!!!
             descripcion       VARCHAR(20),
             fecha_realizado   DATE
      );

      /*
      ,* Restricción a nivel de Tabla
      ,*/
      CREATE TABLE items_pedidos(
             cod_item      INT,
             cod_pedido    INT REFERENCES pedidos,
             descripcion   varchar(20),
             precio        SMALLINT,
             alta          DATE,
             PRIMARY KEY(cod_item, cod_pedido) -- ACA!!!
      );
    #+END_SRC
*** Agregar/Eliminar PK - Sintáxis en SQL
    #+BEGIN_QUOTE
    Si creamos una tabla donde las columnas no le agregamos el constraint ~NOT NULL~
    y luego usamos ~ALTER~ para agregarle el *constraint* de (PK) a esas columnas,
    
    el motor de sql nos lanzará una excepción de que una (PK) NO puede ser ~NULL~
    porque rompe con la *regla de integridad de la entidades*

    Una posible solución sería alterando la columna
    ~ALTER TABLE Clientes ALTER COLUMN id_cliente CHAR(4) NOT NULL~
    y luego si podemos agregar el *constraint* de la (PK)
    ~ALTE TABLE Clientes ADD CONSTRAINT pk_cliente PRIMARY KEY(id_cliente)~
    #+END_QUOTE

    #+BEGIN_SRC sql
      /*
       ,* Agregar el constraint con la tabla ya creada
       ,*/

      CREATE TABLE alumno(
        dni        INT NOT NULL, -----> Es FUNDAMENTAL agregarles el constraint "NOT NULL"
        legajo        INT NOT NULL, --> para que luego podamos agregarles el constraint de PK
        nombre       VARCHAR(20)
      );

      --> Observación:
      --> Si no agregamos la constraint "NOT NULL" en la definición de las columnas
      --> lo deberemos hacer luego con un "ALTER COLUMN"

      -- 1ra manera:
      -- (el motor le agrega un nombre aleatorio al constraint)
      ALTER TABLE alumno
        ADD PRIMARY KEY(dni, legajo);

      -- 2da manera:
      -- especificamos el nombre del constraint
      ALTER TABLE alumno
        ADD CONSTRAINT pk_alumno PRIMARY KEY(dni, legajo);

      /*
       ,* Eliminar el constraint
       ,*/

      -- suponiendo que "nosotros" le definimos ese nombre a la (PK)
      -- caso contrario se debe revisar en el motor, que nombre le definió
      ALTER TABLE alumno
        DROP CONSTRAINT pk_alumno;
    #+END_SRC
** (FK) Foreign Key Constraint
*** Conceptos
   - Puede estar formada por 1 o más columnas
   - Está referenciada a una (PK) *primary key* de otra tabla
   - Se utiliza el concepto de [[Integridad Referencial][Integridad Referencial]]
*** Crear FK - Sintáxis en SQL
    #+NAME: restricciones-a-nivel-tabla
    #+BEGIN_SRC sql
      CREATE TABLE facturas(
             numero         INTEGER,
             letra          VARCHAR(1),
             cliente        SMALLINT,
             fecha_generada DATE,
             FOREIGN KEY (cliente) REFERENCES clientes (id_cliente),
             PRIMARY KEY (numero, letra)
      );
    #+END_SRC

    #+NAME: restricciones-a-nivel-columna
    #+BEGIN_SRC sql
      CREATE TABLE facturas(
             numero         INTEGER,
             letra          VARCHAR(1),
             cliente        SMALLINT REFERENCES clientes,
             fecha_generada DATE,
             PRIMARY KEY (numero, letra)
      );
    #+END_SRC
*** Agregar/Eliminar FK - Sintáxis en SQL
    #+BEGIN_SRC sql
      /*
       ,* Agregar el constraint con la tabla ya creada
       ,*/

      CREATE TABLE Alumnos(
        dni        INT,
        legajo        INT,
        nombre       VARCHAR(20),
        materia_id INT
      );

      CREATE TABLE Materias(
        materiaID INT NOT NULL,
        nombre VARCHAR(30) NOT NULL,
        PRIMARY KEY (materiaID)
        );

      -- 1ra manera:
      -- (el motor le agrega un nombre aleatorio al constraint)
      ALTER TABLE Alumnos
        ADD FOREIGN KEY(materia_id) REFERENCES Materias(materiaID);

      -- 2da manera:
      -- especificamos el nombre del constraint
      ALTER TABLE Alumnos
        ADD CONSTRAINT pk_materia FOREIGN KEY (materia_id) REFERENCES Materias(materiaID);

      /*
       ,* Eliminar el constraint
       ,*/

      -- suponiendo que "nosotros" le definimos ese nombre a la (FK)
      -- caso contrario se debe revisar en el motor, que nombre le definió
      ALTER TABLE Alumnos
        DROP CONSTRAINT pk_materia;
    #+END_SRC
** Reglas de Integridad
*** Integridad de Entidad
    - Cada tabla debe tener una (PK) *primary key* que haga única a cada fila/registro
    - La (PK) *primay key* NO puede ser nula
*** Integridad Referencial
    - El valor de la (FK) *foreign key* debe existir como valor en la *primary key* que referencia
      (/Si una FK hace referencia a una PK, entonces hace referencia a un registro de otra tabla, y éste debe existir/)
** Tipos de Constraints Referenciales
*** Conceptos
     #+NAME: tipo-constraints
     |---------------+-------------------------|
     | TIPO          | RELACION                |
     |---------------+-------------------------|
     | Ciclic        | padre-hijo entre tablas |
     | Self          | padre-hijo misma tabla  |
     | Multiple path | PK con varias FK        |
     |---------------+-------------------------|
*** Ejemplos
    #+BEGIN_QUOTE
    Un ejemplo de ciclic referential constraint, sería:
    Cliente -> Facturas
    Pedido -> Productos
    Factura -> Renglones

    Ejemplos con una self referential constraint, serían:
    Empleados->Empleados (por subordinados)
    Categoria->Categoria (para subcategorias, ej. mercadolibre)
    Color->Color (colores secundarios compuestos por primarios) 
   
    El de empleado-jefe podría ser 
    ~FOREIGN KEY (n_jefe) references empleados (n_empleado)~
    
    Ejemplos de multiple path constraint
    Cliente->Facturas, Cliente->Reclamos
    #+END_QUOTE
*** Sintáxis en SQL
    #+BEGIN_QUOTE
    El motor NO nos dejará ingresar un empleado que tenga una referencia de jefe que NO exista,
    pero nos dejará ingresar un empleado que tenga una referencia de jefe NULA
    Por qué? porque el *default* es ~NULL~
    #+END_QUOTE

    #+NAME: restricciones-a-nivel-tabla
    #+BEGIN_SRC sql
      CREATE TABLE empleados(
             empleado INTEGER PRIMARY KEY,
             nombre VARCHAR(20),
             apellido VARCHAR(20),
             jefe     INTEGER,
             -- ACA TENEMOS LA AUTOREFERENCIA
             FOREIGN KEY (jefe) REFERENCES empleados (empleado)
      );
    #+END_SRC
** Integridad Semántica
*** Conceptos
    Para que los datos que guardemos respeten las restricciones
    - sobre los *dominios*
    - sobre los *atributos*

    #+BEGIN_COMMENT
    Cuando se refiere a *dominio* supongo que lo relaciona
    cuando definimos el tipo de dato en la tabla, antes de definir el campo
    #+END_COMMENT

     #+NAME: 
     |------------+------------------------------------------|
     | Data type  | Especificar tipo de dato de una columna  |
     |------------+------------------------------------------|
     | Default    | Especificar un valor por defecto a una   |
     | Constraint | columna                                  |
     |            |                                          |
     |            | Aplica solo para =INSERT=                |
     |------------+------------------------------------------|
     | Unique     | Cada fila de una columa/s será única     |
     | Constraint |                                          |
     |            | Aplica para =INSERT/UPDATE=              |
     |------------+------------------------------------------|
     | Not Null   | Una columna/as no puede tener valor NULL |
     | Constraint |                                          |
     |            | Aplica para =INSERT/UPDATE=              |
     |------------+------------------------------------------|
*** Data Type
**** Conceptos
    - Define el tipo de valor que se puede almacenar en una columna
**** Ejemplos
*** Default Constraint
**** Conceptos
    - Para fijar un valor predeterminado en una columna al hacer un ~INSERT~ con un atributo sin valor
    - Las columnas no nombradas en el ~INSERT~ les dará un valor por defecto que pongamos al definir la tabla
    - Si no se asigna un valor, el valor predeterminado es NULL
    - Aplica sólo para ~INSERT~, NO para ~UPDATE~

    *Obsevación:*
    Si no agregamos un valor en la columna del insert, y tiene fijado un valor predeterminado, tendrá ese valor
**** Sintáxis en SQL
     #+BEGIN_SRC sql
       CREATE TABLE cliente(
              dni       INT PRIMARY KEY,
              puntos    NUMBER DEFAULT 0,
              alta      DATE DEFAULT CURRENT_DATE
       );
     #+END_SRC
*** [#A] Unique Constraint
**** Conceptos
    - Para indicar que el valor sobre una columna (ó columnas) será único para cada fila
    - Aplica tanto para INSERT como UPDATE
    - Podemos usarlo en [[Claves Alternas][claves alternas]] (son las claves alternativas, que no se eligieron como PK)

    *Observaciones:*
    - Las *claves candidatas* son aquellas que representan de forma únivoca a cada fila/registro de una entidad/tabla.
    - Si el diseñador elige una o un conjunto de ellas como (PK) clave primaria, el resto se consideran *claves alternas*
    - Acepta el valor ~NULL~ (/llamado "valor desconocido"/) pero una única vez, en un sólo registro
    - En una PK no puede tener ningún registro con "valor desconocido" ~NULL~
**** Sintáxis en SQL
     #+BEGIN_QUOTE
     En este caso tenemos dos *claves candidatas*, los atributos ~legajo~ y ~cuil~.
     Como el diseñador prefirió elegir la primera como (PK) *clave primaria*, la segunda se considera
     como *clave alterna* por tanto usaremos ~UNIQUE~ para decir que posee valores únicos para
     cada fila de clientes
     #+END_QUOTE

     #+NAME: entidad-clientes
     #+BEGIN_SRC sql
       -- cuil: es clave alterna
       -- la estamos definiendo a nivel "columna"
       CREATE TABLE clientes(
              legajo     NUMERIC PRIMARY KEY,
              cuil       NUMERIC(10,0) UNIQUE, -->>> Clave alternativa (clave candidata, que no fué elegida como PK)
              nombre     VARCHAR(20),
              nacimiento DATE,
              ingreso    DATE
       );
     #+END_SRC

     #+NAME: entidad-empleados
     #+BEGIN_SRC sql
       -- dni+tipo_documento representan una clave candidata
       -- pero al no ser elegida como PK es una clave alterna
       -- pero siguen representando de forma unica a cada ocurrencia
       -- de empleados
       --
       -- la estamos definiendo a nivel "tabla"
       CREATE TABLE empleados(
              legajo           NUMERIC PRIMARY KEY,
              dni              NUMERIC(10,0),
              tipo_documento   NUMERIC(10,0),
              nombre           VARCHAR(20),
              nacimiento       DATE,
              ingreso          DATE,
              UNIQUE (dni, tipo_documento) -->>> Clave alternativa (clave candidata, que no fué elegida como PK)
       );
     #+END_SRC
*** Not null Constraint
    - Para indicar que el valor sobre una o varias *columnas* NO puedan tener ~NULL~ (ausencia de valor)
**** Sintáxis en SQL
     #+BEGIN_SRC sql
       CREATE TABLE cliente(
       dni       INT PRIMARY KEY,
       nombre    VARCHAR(20) NOT NULL,
       apellido   VARCHAR(20) NOT NULL,
       puntos    NUMBER DEFAULT 0,
       alta      DATE DEFAULT CURRENT_DATE
       );
     #+END_SRC
*** [TODO] Check Constraint
**** Conceptos
     - Para indicar que condiciones debe cumplir una columna al momento de un ~INSERT~ o ~UPDATE~ una fila/registro
     - Devuelve un valor booleano ~TRUE~ ó ~FALSE~
     - NO se puede agregar *queries*
**** Ejemplos
*** Tipos de Constraints
**** Conceptos
     Los constraints se pueden definir de dos maneras
     1. Restricciones a nivel de *columna*
     2. Restricciones a nivel de *tabla*
**** Restricción a nivel columna
     - Se agrega al lado del *tipo de dato*,
     - Se utiliza cuando la restricción es sólo para un atributo/columna específica

     #+NAME: restriccion-columna
     #+BEGIN_SRC sql
       CREATE TABLE cliente(
              dni    INT PRIMARY KEY, --> restricción a nivel de columna, por ser sólo un atributo
              nombre VARCHAR(20),
              edad   SMALLINT,
              alta   DATE
       );
     #+END_SRC
**** Restricción a nivel tabla
     - Cuando aplica a varias columnas

     #+NAME: restriccion-tabla
     #+BEGIN_SRC sql
       CREATE TABLE cliente(
              dni      INT,
              tipo_dni INT,
              nombre VARCHAR(20),
              edad   SMALLINT,
              alta   DATE,
              PRIMARY KEY (dni, tipo_dni) --> restriccion a nivel de tabla, por ser una clave compuesta
       );
     #+END_SRC
*** Identity - Autoincrement
**** Conceptos
     - En el motor *sql* se asigna en la definición del campo ~IDENTITY(valor_inicial_semilla, valor_salto_incremento)~
     - Genera valores autonúmericos/autoincremental que incrementa de tanto en tanto (/Ej. 1,2,3,...,7,8,9,.../)
     - Es útil si no tiene definida una PK que identifique unívocamente a cada registro de una tabla
     - Se puede ajustar el valor del salto de incremento y su valor inicial
     - NO se deben ingresar valores en la columna definida con ~IDENTITY~
     - Cada vez que se inserta un registro en la tabla, el valor de ese campo se incrementará (según como se haya definido)
     - El valor de último ~IDENTITY~ se guarda en una tabla de la sesión actual

     #+BEGIN_QUOTE
     NO siempre es correcto definir un valor autoincremental como PK,
     poque perderíamos el control/chequeo del motor con la no repetición de registros

     porque si que tenemos una tabla *Clientes* donde definimos la (PK) así ~cliente_id INT IDENTITY(1,1) PRIMARY KEY~
     nada impide que el usuario ingrese el mismo cliente 10 veces...
     ~INSERT INTO Clientes (nombre, edad) VALUES ("Carlos", 20), ("Carlos", 20), ("Carlos", 20), ("Samuel", 25)~

     Una posible solución al caso anterior sería definir la PK con el ~{DNI, TIPO_DOC}~
     #+END_QUOTE
**** Ejemplo 1
     #+BEGIN_SRC sql
       CREATE TABLE Clientes(
         --> al definir (1,1) que es (valor_semilla_inicial, valor_salto_incremento)
         --  1. el primer registro empezará con valor 1
         --> 2. por cada nuevo registro, incrementará el valor en 1 (1,2,3,...,8,9,..)
         cliente_id INT IDENTITY(1,1) PRIMARY KEY,
         nombre VARCHAR(30) NOT NULL,
         edad INT
         );
     #+END_SRC
**** Ejemplo 2
  #+BEGIN_SRC sql
    -- Creamos una tabla de ejemplo
    CREATE TABLE productos (cod_producto UNIQUE NOT NULL, descripcion VARCHAR(250) NOT NULL)

    -- Simulamos que nos olvidamos de agregar la columna,
    -- y queremos agregarla sin borrar y crear la tabla de nuevo
    ALTER TABLE productos
    ADD idProducto INT IDENTITY(1,1)
    GO

    -- Insertamos múltiples registros, con datos ficticios
    INSERT INTO productos VALUES (NEWID(), 'auto rojo'), (NEWID(), 'casa vieja'), (NEWID(), 'moto nueva'), (NEWID(), 'coche moderno')

    -- Guardamos el valor en nuestra variable @ultimo_producto_id
    -- el alcance es más amplio con @@ (porque es una variable global)
    SET @ultimo_producto_id = @@IDENTITY

     -- Otra manera.. pero para obtener el identity local
    SELECT @ultimo_producto_id = SCOPE_IDENTITY()

    -- modificamos la tabla, y borramos la nueva la columna que tenia IDENTITY
    ALTER TABLE #clientesPremium
    DROP Column idCliente  -- suponiendo si queriamos borrar la columna.. :(
    GO
  #+END_SRC
