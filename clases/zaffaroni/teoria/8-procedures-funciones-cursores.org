#+TITLE: Transact-SQL - Stores Procedures - Funciones - Cursores
#+BEGIN_COMMENT
 Diccionario de datos
  En ...
  - sys.procedures
    son
  - sys.all_sql_models
    paa ver el codigo de los procedures
#+END_COMMENT
* Funciones
** Conceptos

   #+BEGIN_QUOTE
   La sintáxis es similar a los *store procedures*, con la diferencia que se pueden ejecutar dentro de *queries*
   mientras que los *store procedures* NO se pueden ejecutar en una *query*
   #+END_QUOTE
** Funciones de Usuario
*** Conceptos
   - Deben retornar un valor (/valor escalar ó variable tipo tabla/)
   - Solo pueden ejecutar ~SELECT~ (/operaciones de lectura, que no modifiquen el estado de los datos/)
   - NO pueden ejecutar comandos que modifiquen el estado de los datos, como
     1. ~INSERT~
     2. ~DELETE~
     3. ~UPDATE~
*** Funciones Escalares
**** Conceptos
     - Retornan un valor escalar (/Un INT, VARCHAR(30), CHAR, .../)
**** Sintáxis en SQL
     #+BEGIN_SRC sql
       CREATE FUNCTION [ower_name.] nombre
         ([@parameter_name [AS] tipo_dato] [,..n]) -- los parámetros son opcionales
         RETURNS tipo_dato
         [AS]
       BEGIN
         function_body  --> definir variables, usar condicionales, ...
           RETURN valor --> retorna un valor escalar (puede devolver un select, si el resultado es un escalar)
       END
     #+END_SRC
**** Ejemplo - Calcular el doble de un número
   #+BEGIN_SRC sql
     IF OBJECT_ID('eldoble') IS NOT NULL
       DROP FUNCTION dbo.eldoble
     GO

       CREATE FUNCTION eldoble (@var1 DECIMAL(6,2)) --> identificador + parámetros
         RETURNS DECIMAL(6,2) AS --> el tipo de retorno
       BEGIN
         DECLARE @var2 DECIMAL(6,2); --> cuerpo
         SET @var2 = @var1 * 2;      -->
         RETURN @var2; --> valor escalar que retornamos (del mismo tipo que definimos al principio)
     END
     GO

     SELECT dbo.eldoble(2) --> invocamos la función escalar
     GO
   #+END_SRC
*** Funciones de valores de tabla en línea
**** Conceptos
     Retornan un valor del tipo tabla, osea un ~SELECT~ que devuelve n filas, y M columnas
**** Sintáxis en SQL 
    #+BEGIN_SRC sql
      CREATE FUNCTION [owner_name.] nombre
        ([@parameter_name [AS] tipo_dato] [,..n]) -- los parámetros son opcionales
        RETURNS TABLE
        [AS]
        RETURN [(select-statement)] --> retorna un select, con varias filas/columnas
    #+END_SRC
**** Ejemplo - Ventas de Libros por Sucursal
     #+BEGIN_SRC sql
       /*
        ,* Supongamos que queremos obtener las venta de libros por sucursal.
        ,*
        ,* Esta función devuelve una tabla, porque es un select con N columnas, y M filas
        ,*/

       CREATE FUNCTION VentasPorSucursal (@sucursal_id VARCHAR(30))
         RETURNS TABLE
       AS
         RETURN (SELECT nombre, cantidad
                   FROM ventas v, titulos t
                  WHERE v.sucursal=@sucursal_id AND n.titulo=v.titulo)
     #+END_SRC
** Funciones del Motor (built-in function)
   - Funciones agregadas (~SUM~, ~COUNT~, ~AVG~, ..)
   - Otra función común es ~COALESCE~ (/para reemplazar el valor NULL por otro/)
* Store Procedures - Procedimientos Almacenados
** Conceptos
  - NO se pueden utilizar dentro de un ~SELECT~
  - NO retornan valores (/a lo mucho retorna un true/false si tuvo éxito o no/)
  - Pueden ejecutar comandos que modifiquen el estado de los datos, como
    1. ~INSERT~
    2. ~DELETE~
    3. ~UPDATE~
  - Se ejecutan con ~EXEC[UTE]~
  - Con ~@~ definimos *variables locales*
  - Con ~@@~ definimos *variables globales*
  - Otorga un nivel de seguridad extra
    (porque se permite ejecutar el procedure, y no los SELECT)
 
  #+BEGIN_QUOTE
  El *output* es el *valor de salida* opcional, pero actúa como los *punteros en C*.
  
  Un *procedimiento*
  1. NO puede retornar un *parámetro por valor*
  2. Puede guardar un resultado en un *parámetro por referencia*
  #+END_QUOTE

  #+BEGIN_SRC sql
    CREATE PROCEDURE suma @var1 INT, @var2 INT OUT --> el 2do parámetro es por referencia
    AS
      SET @var2 = @var1 + 10;
      GO

    DECLARE @resultado INT --> declaramos la variable donde guardaremos el resultado
    EXECUTE suma 2, @resultado OUT --> le pasamos al procedure un "parámetro por referencia"
    SELECT @resultado
  #+END_SRC

  *Observación:*
  - Las expresiones entre corchetes [ ] quieren decir que son opcionales
** Sintáxis SQL
   #+BEGIN_SRC sql
     CREATE PROC[EDURE] nombre [@parameter tipo_dato] [OUTPUT] [,..n]
       AS sql_statement [..n]
       GO
   #+END_SRC
** Parámetros de Entrada/Salida
   Por defecto los parámetros son ~IN~ es decir que son *variables de entrada* que se usarán
   como variables locales dentro del SP.
   Si al parámetro le agregamos ~OUT~ indicamos que algún resultado dentro del SP se guardará en él,
   y tanto en la creación del SP como en su ejecución debe aparecer ~OUT~ 

   |-----------+---------------------------------------------------------------------|
   | Parámetro | Descripción                                                         |
   |-----------+---------------------------------------------------------------------|
   | IN        | Indica que será un parámetro de entrada, será variable local del SP |
   |-----------+---------------------------------------------------------------------|
   | OUT       | Indica que se guardará algún resultado del SP                       |
   |-----------+---------------------------------------------------------------------|

   #+BEGIN_SRC sql
     -- en este caso @var1 y @var2 son parámetros de entrada, por defecto tienen IN
     CREATE PROCEDURE suma1 @var1 INT, @var2 INT AS
     RETURN @var1+@var2
     GO 

     -- en este caso @var1 es un parámetro de entrada, y @var2 uno de salida
     CREATE PROCEDURE suma2 @var1 INT, @var2 INT OUT AS
     SET @var2 = @var1 + 10
     GO 
   #+END_SRC
** Modificarlos
  - Con ~alter procedure~ se modifican
** Ejecutarlos
   Con la instrucción ~EXECUTE~ ó también ~EXEC~ seguido del nombre del procedimiento

   #+BEGIN_SRC sql
     -- esto va a devolver siempre 10, porque por más que recibe dos parámetros
     -- sólo le estamos asignando el valor 10 al tercer parámetro
     CREATE PROCEDURE suma @var1 INT, @var2 INT, @var3 INT AS
     BEGIN
     DECLARE @resultado int
     SET @resultado = 10
     END
     GO

     DECLARE @resultado int;
     EXECUTE suma 15,13, @resultado
     SELECT @resultado
   #+END_SRC
** Sentencias de manejo de bloques
*** Conceptos
    + Un *bloque explícito* se inician con ~BEGIN~ y finalizan con ~END~
    + Un *bloque implícito* se forma con lo que esté despues del ~AS~ y antes del ~BEGIN .. END~
*** Ejemplos
    #+BEGIN_SRC sql
      CREATE PROCEDURE nombre AS
      -- bloque implícito
      DECLARE @var1 INT  
      SET @var1 = 10

      BEGIN -- inicio de "bloque explícito"
            -- sentencias
      END   -- fin de "bloque explícito"
    #+END_SRC
** Ejecutar comandos del SO
** Ejemplos
*** Ejemplo 1 - Con dos parámetros y retornando valor
    #+BEGIN_SRC sql
      CREATE PROCEDURE suma @var1 INT, @var2 INT AS
      DECLARE @var3 INT         -- declaramos una tercera variables
      SET @var3 = @var1 + @var2 -- le asignamos un valor
      RETURN @var3              -- la retornamos
      GO

      /*
       ,* 1. Declaramos la variable y su tipo de dato
       ,* 2. Ejecutamos el procedimiento y se lo asignamos a la variable
       ,* 3. Lo imprimimos con SELECT, aunque podríamos haber usado PRINT
       ,*/
      DECLARE @resultado INT
      EXECUTE @resultado = suma 3 2 -- alternativa: usar "exec"
      SELECT @resultado
      GO
    #+END_SRC
*** Ejemplo 2 - Con un parámetro de entrada y otro de salida
    #+BEGIN_SRC sql
      /*
       ,* A la variable que le agregamos "OUT" es la que tendrá
       ,* el resultado de la operación que hagamos.
       ,*
       ,* IMPORTANTE!! Ese OUT debe aparecer en la creación del SP
       ,* como en su ejecución (al usar EXECUTE ó EXEC)
       ,*/
      CREATE PROCEDURE suma @var1 INT, @var2 INT OUT
      AS
      SET @var2 = @var1 + 10;
      GO

      -- 1. Declaramos la variable
      DECLARE @resultado INT
      -- 2. Ejecutamos el SP, le pasamos el parámetro de entrada y el de salida
      EXECUTE suma 2, @resultado OUT
      SELECT @resultado
      GO
    #+END_SRC
* Store Procedures y Transacciones
** Ejemplo
   #+BEGIN_SRC sql
     CREATE PROCEDURE borrar_clientes @ClienteNumDesde INT, @ClienteNumHasta INT AS
     BEGIN TRANSACTION
     UPDATE #clientes SET fname = fname+' MOROSO'
       WHERE customer_num BETWEEN @ClienteNumDesde AND @ClienteNumHasta

     IF (MONTH(getdate()) < 12) -- si la fecha actual, tiene como número de mes menor a 12
       COMMIT TRANSACTION       -- entonces aplicamos los cambios del UPDATE, con COMMIT
     ELSE
       ROLLBACK TRANSACTION     -- si el número de mes actual es > a 12, cancelamos los cambios con ROLLBACK
     GO

     SELECT * FROM #clientes			      		-- 1. seleccionamos antes del sp
     EXECUTE dbo.borrar_clientes 101, 105	-- 2. ejecutamos el store procedure
     SELECT * FROM #clientes					      -- 3. evaluamos si hubo cambios luego de ejecutar el sp
     GO
   #+END_SRC
* Cursores
** Conceptos
   - En otros lenguajes es un tipo de variable del tipo *data set* ó *record set*
   - Es una variable que se mantiene en *memoria* y contiene un conjunto de registros de un ~SELECT~
   - Se declara del tipo ~CURSOR~ y se define como un ~SELECT~ (/porque es el valor que se le asigna/)
   - Permite iterar sobre un ~SELECT~ leyendo registro por registro
   - NO hay límite de cursores abiertos ni declarados (pero recordar cerrarlos)
** Sintáxis SQL (1)
   Sintáxis extendida de Transact-SQL

   #+BEGIN_SRC sql
     /*
       ,* Nota (1):
       ,* -> Por default es "local" (lo más recomendado)
       ,*
       ,* -> LOCAL: Es local en el ámbito donde se define (Ej. procedure, trigger, ...)
       ,* -> GLOBAL: Se puede acceder fuera del ámbito (Ej. desde otro procedure,...)
       ,*
       ,* Nota (2):
       ,* -> Por default es "FORWARD_ONLY"
       ,*
       ,* -> FORWARD_ONLY: Sólo puede ir hacia adelante, NO puede ir hacia atrás
       ,* -> SCROLL: Se puede ir hacia atras/adelante (más lento y dificil de manipular)
       ,*
       ,* Nota (3):
       ,* -> Por default es "STATIC"
       ,*
       ,* -> STATIC: Se ejecuta sólo una vez la consulta SELECT
       ,* -> DYNAMIC: Cada vez que avanza, ejecuta a cada rato el SELECT (más lento, porque actualiza a c/rato)
       ,*
       ,* Nota (4):
       ,* -> Si se definió como "FORWARD_ONLY" => Solo tiene [NEXT | LAST]
       ,* -> Si se definió como "SCROLL" => Se puede elegir cualquiera (en este caso se nota, que trabaja como un ptr*)
       ,*
       ,* Nota(5):
       ,* -> La cantidad de variables del "INTO" deben ser igual a la cant. de columnas del "SELECT"
       ,* -> Debe relación entre el orden de las variables del "INTO" y las columnas del "SELECT" (por los tipos de datos)
      ,*/

     --> 1) Declarar y Definir
     DECLARE nombre_cursor CURSOR [LOCAL | GLOBAL] --> (1)
      [FORWARD_ONLY | SCROLL] [STATIC | DYNAMIC] --> (2) (3)
      FOR select_statement
   
     --> 2) Abrir
      OPEN [GLOBAL] nombre_cursor  --> el "OPEN" ejecuta el SELECT ()

     --> 3) Recorrido
        FETCH [NEXT| PRIOR | FIRST | LAST] --> (4)
        [FROM [GLOBAL] cursor_name] --> cuando se quiere usar varios cursores, para iterar el for de afuera de este
        [INTO @variable_name [,..n]] --> (5) guarda el resultado del "SELECT" en estas variables

        WHILE (@@FETCH_STATUS=0) --> la condición de corte resulta del resultado de la variable de sistema @@FETCH_STATUS
        BEGIN --> bloque de sentencia "explícita" - inicio
        -- sentencias sql
        FETCH nombre_cursor INTO @variable_name [,..n]
        END   --> bloque de sentencia "explícita" - fin
     --> 4) Cerrar y Deallocar
        CLOSE [GLOBAL] nombre_cursor --> lo cierra (pero si hace un nuevo OPEN, se ejecuta again el SELECT y quizás arroja otro resultado)
        DEALLOCATE [GLOBAL] nombre_cursor --> libera las estructuras en memoria que lo componen (NO se puede volver a hacer OPEN)
   #+END_SRC
** Sintáxis SQL (2) - Menos descriptiva
   #+name: cursor-sintaxis
   #+BEGIN_SRC sql
     /*
      * Nota (1):
      * -> Se deben mantener la mismas variables, y en el mismo orden en ambos FETCH
     */
     DECLARE nombre_cursor CURSOR
     FOR sentencia_sql
     OPEN nombre_cursor
     FETCH NEXT nombre_cursor INTO lista_variables --> (1)
     WHILE (@@FETCH_STATUS=0)
       BEGIN --> bloque de sentencia "explícita" - inicio
       -- sentencias sql
       FETCH NEXT nombre_cursor INTO lista_variables --> (1)
     END   --> bloque de sentencia "explícita" - fin
     CLOSE nombre_cursor
     DEALLOCATE nombre_cursor
   #+END_SRC
** Estructura - Descripción
   La estructura que se debe seguir es
   1. Declarar el nombre de cursor
   2. Asociar la consulta ~SELECT~ de sql que va a ejecutar, y recorrerá fila por fila
   3. Abrir el cursor (se cargará en memoria)
   4. Usar ~FETCH~ y ~INTO~ para avanzar y guarda los datos de cada registro/fila
      - Con ~FETCH~ para obtener la siguiente fila
      - Con ~INTO~ para insertar los valores de la columna en las variables declaradas
   5. Iterar con ~WHILE (@@FETCH_STATUS = 0)~ sobre las filas de la consulta asociada
      - Con ~WHILE~ creamos la sentencia ciclica
      - Con ~@@FETCH_STATUS~ actúa como *centinela* cortando el cilo de iteración,
        al tener ~@@~ una variable global, e indica si quedan registros por leer
   6. Definimos un *bloque explícito*
      - Delímitado por ~BEGIN~ y ~END~
      - Dentro colocamos las sentencias SQL que queramos
   7. Volvemos a colocar el ~FETCH~ y ~INTO~ tal cual como estaba luego de abrir el cursor
      (con esto pedimos la siguiente fila, y guardamos nuevamente los valores de las columnas
       en las variables declaradas al principio)
   8. Cerramos el cursor con ~CLOSE~
   9. Desalojamos el cursor de la memoria con ~DEALLOCATE~
** Ejemplos
*** Ejemplo 1 - Imprimir el nombre y apellido de clientes
    #+BEGIN_SRC sql
      /*
      ,* - Cursor: ClienteInfo
      ,* - Variables donde guardar los datos: @Cliente
      ,* - Query asociada al Cusor: SELECT fname+','lname FROM dbo.customer
      ,*/
      -- 1. Declaramos las variables donde guardaremos datos de las columnas
      DECLARE @ClienteCod SMALLINT, @ClienteNomApe VARCHAR(40)
      -- 2. Declaramos el cursor, y le asociamos una query SELECT
      DECLARE ClienteInfo CURSOR FOR
      SELECT customer_num, fname+','+lname FROM dbo.customer
      -- 3. Abrimos el cursor
      OPEN ClienteInfo
      -- 4. Obtenemos el primer registro de la consulta asociada al cursor
      -- y guardamos el resultado de las columnas en la variables declaradas
      -- (en el mismo orden que la consulta SELECT)
      FETCH NEXT FROM ClienteInfo INTO @ClienteCod, @ClienteNomApe
      -- 5. Iteramos mientras hayan registros
      -- (la condicion de corte es cuando sea distinto de cero)
      WHILE @@FETCH_STATUS=0
        BEGIN
          --PRINT CAST(@ClienteCod as VARCHAR(10))+ ':'+@ClienteNomApe
          PRINT CONVERT(VARCHAR(10), @ClienteCod)+ ':'+@ClienteNomApe
          -- en cada iteracion, pedimos el siguiente registro
          FETCH NEXT FROM ClienteInfo INTO @ClienteCod, @ClienteNomApe
        END
      -- 6. Cerramos y desalojamos el cursor
      -- (se borra la referencia al cursor, se liberan los recursos asignados al proceso, se desloja el proceso de la memoria)
      CLOSE ClienteInfo
      DEALLOCATE ClienteInfo
      GO
      -- Obs: Con GO hacemos que las instrucciones anteriores sean atomicas, y me permite volver a declarar variables con mismo nombre
    #+END_SRC
*** Ejemplo 2 - Seleccionar registros de una tabla e insertar en otra tabla
   #+BEGIN_SRC sql
     DECLARE items_almacen CURSOR FOR 
     SELECT id_item FROM tabla_items WHERE id_almacen = @cod_almacen
     -- declaramos una variable para el cursor (queda en memoria)
     DECLARE @item_del_cursor INTEGER
     -- a una area de memoria, le agrega filas del select
     OPEN items_almacen
     -- busca la primera fila del primer select
     FETCH items_almacen INTO @item_del_cursor
     -- mientras haya mas filas/registros ejecuta lo de adentro del while
     WHILE (@@FETCH_STATUS =0)
     BEGIN -- bloque de sentencia explícito - inicio
       INSERT INTO tabla_items_aux VALUES (@item_del_cursor)
       FETCH NEXT FROM items_almacen INTO @item_del_cursor 
     END -- bloque de sentencia explícito - fin
     CLOSE items_almacen
     DEALLOCATE items_almacen
   #+END_SRC
*** Ejemplo 3 - Cursor con Store Procedure que recibe dos parámetros
    #+BEGIN_SRC sql
      CREATE PROCEDURE mejoresClientes @Cliente_CodDesde SMALLINT, @Cliente_CodHasta SMALLINT AS
      DECLARE @ClienteNum SMALLINT
      DECLARE @ClienteNom VARCHAR(20), @ClienteDir VARCHAR(20)
      DECLARE ClienteInfo CURSOR FOR SELECT customer_num, fname, address1 FROM #clientes

      OPEN ClienteInfo
      FETCH NEXT FROM ClienteInfo INTO @ClienteNum, @ClienteNom, @ClienteDir
      WHILE @@FETCH_STATUS=0
      BEGIN
        PRINT @ClienteNom+', '+@ClienteDir
        INSERT INTO #clientesPremium VALUES (@ClienteNum, @ClienteNom, @ClienteDir)
        FETCH NEXT FROM ClienteInfo INTO @ClienteNum, @ClienteNom, @ClienteDir
      END
      CLOSE ClienteInfo
      DEALLOCATE ClienteInfo
      GO

      EXECUTE dbo.mejoresClientes 101, 110
      SELECT * FROM #clientesPremium
    #+END_SRC
*** Ejemplo 4 - Cursor con una tabla temporal de ejemplo
    #+BEGIN_SRC sql
      CREATE TABLE #ITEMS (ITEM_ID uniqueidentifier NOT NULL, ITEM_DESCRIPTION VARCHAR(250) NOT NULL)
      INSERT INTO #ITEMS VALUES (NEWID(), 'autito'), (NEWID(), 'casit'), (NEWID(), 'motito'), (NEWID(), 'coche')

      -- (Declaramos una variable que contendra el ID de cada fila)
      -- (Obs #1: Tendra que haber tantas variables declaradas, como columnas de la consulta
      -- asociada al cursor)
      DECLARE @ITEM_ID uniqueidentifier
      -- 1. Declaramos el cursor, y le asociamos la consulta SELECT con la que iterara
      -- (en este ejemplo, la consulta tendrá solo 1 columna)
      DECLARE ITEM_CURSOR CURSOR FOR         -- declaracion del cursor
      SELECT ITEM_ID FROM #ITEMS             -- consulta SELECT asociada al cursor
      -- 2. Cargamos los resultados a memoria
      -- (ademas ejecuta la consulta SELECT asociada al cursor)
      OPEN ITEM_CURSOR
      -- 3. Obtenemos (fetch) el primer resultado
      -- (Obs: Copiamos el resultado solo a 1 variable, pero si el SELECT del cursor
      -- tuviera mas columnas, tendriamos que agregarlas en el INTO en el mismo orden)
      FETCH NEXT FROM ITEM_CURSOR           -- FETCH: obtenemos el sig. resultado
      INTO @ITEM_ID                         -- INTO: lo copiamos a una variable (podrian ser a mas)
      -- 4. Si hay resultados para operar, sigue iterando
      -- (Evalua si la lectura del sig. registro es valida, si es asi el valor es cero,
      -- recordemos que @@ es para variables globales)
      WHILE @@FETCH_STATUS = 0
        -- agregamos un bloque con BEGIN...END, con la consulta que queramos
        BEGIN
        SELECT ITEM_DESCRIPTION FROM #ITEMS
        WHERE ITEM_ID = @ITEM_ID -- In regards to our latest fetched ID
         -- 5. Cuando terminó de ejecutar la consulta, continúa con el siguiente
        FETCH NEXT FROM ITEM_CURSOR INTO @ITEM_ID
        END
      -- 6. Finaliza cuando @@FETCH_STATUS indica que no hay más resultados
      -- (se liberan los registros tomados por el cursor, no se pueden seguir usando
      -- a menos que se reabra el cursor)
      CLOSE ITEM_CURSOR
      -- 7. Se libera los datos de memoria y se limpia el proceso
      -- (se elimina la referencia al cursor)
      DEALLOCATE ITEM_CURSOR
    #+END_SRC
*** Ejemplo 5 - Ejercicio complejo de la Guia de ejercicios
    #+BEGIN_SRC sql
      -- creamos la tabla a modo de utilizar el SP
      CREATE TABLE customerStatistics(
        customer_num INT PRIMARY KEY,
        ordersqty INT,
        maxdate Date,
        uniqueProducts INT
      );
      -- Chequemos que se haya creado
      SELECT * FROM dbo.customerStatistics;
      GO -- agregamos este GO ara que el sig. SP sea la unica instruccion del lote (tambien conocido por Batch)

      CREATE PROCEDURE actualizaEstadisticas  @customer_numDESDE INT, @customer_numHASTA INT AS
      BEGIN
        -- 1. Declara el cursor, le asocia la consulta SELECT (que tiene solo 1 columna)
        -- (utiliza los parametros como filtro en la clausula WHERE)
        DECLARE CustomerCursor CURSOR FOR
          SELECT customer_num FROM customer WHERE customer_num BETWEEN @customer_numDESDE AND @customer_numHASTA

        DECLARE  @customer_num INT, @ordersqty INT, @maxdate DATETIME,  @uniqueManufact INT -- declara algunas variables locales
        -- 2. Abre el cursor
        OPEN CustomerCursor
        -- 3. Obtiene el primer registro del SELECT asociado al cursor, y guarda el dato de la unica columna del SELECT en la variable declarada (customer_num)
        FETCH NEXT FROM CustomerCursor INTO @customer_num
        -- 4. Mientras hayan registros itera (la condicion de corte es cuando la variable global fetch_status sea distinto de cero)
        WHILE (@@FETCH_STATUS = 0)
          -- inicia un "Bloque explicito" con BEGIN...END, para ejecutar varias queries
          BEGIN
            -- # Consulta nro 1:
            -- obtiene de un cliente especifico (el que se paso por parametro en el SP):
            -- la fecha del ultimo pedido y lo guarda en la variable local @ordersqty
            -- y la cant. de pedidos que hizo y lo guarda en la variable local @maxDate
            SELECT @ordersqty=count(*) , @maxDate=max(order_date) FROM orders WHERE customer_num = @customer_num;

            -- # Consulta nro 2:
            -- selecciona  la cantidad de fabricantes, asociando los productos que ordeno el cliente especifico en cada pedido
            -- y los guarda en la variable local @uniqueManufact
            -- Obs: Ojo...! Porque esta haciendo una query de producto cartesiano.. (NO son performantes)
            SELECT @uniqueManufact=count(distinct stock_num)  FROM items i, orders o
            WHERE o.customer_num = @customer_num  AND o.order_num = i.order_num;

                  -- # Consulta nro 3:
            -- si el registro del cliente especifico, no aparece en la tabla,
            -- entonces inserta un registro con los datos almacenados en las variables locales  @ordersQty, @maxDate, @uniqueManufact
            -- (Obs: Ojo con el orden de los values, la tabla debe haber sido creada con las columnas en ese orden
            -- a menos que.. pongamos los nombres de las columnas previo al nombre de la tabla donde se insertan los registros)
            IF NOT EXISTS( SELECT 1 FROM CustomerStatistics WHERE customer_num = @customer_num)
              insert into customerStatistics values (@customer_num,@ordersQty, @maxDate,@uniqueManufact);
            -- # Consulta nro 4:
            -- si el registro ya existe, osea ya fue insertado,
            -- entonces actualizamos ese registro con los valores almacenados en las variables locales @ordersQty, @maxDate, @uniqueManufact
            ELSE
              UPDATE customerStatistics SET  ordersQty=@ordersQty,maxDate=@maxDate, uniqueProducts=@uniqueManufact
              WHERE customer_num = @customer_num;

              -- 5. Avanza al siguiente registro (este FETCH debe ser identico al anterior, al que se usa para obtener el primer registro)
            FETCH NEXT FROM CustomerCursor INTO @customer_num
          END; -- aca termina el "bloque explicito"
        -- 6. Cierra el cursor, elimina la referencia al cursor, y lo desaloja el proceso de la memoria (liberando los recursos que utilizaba)
        CLOSE CustomerCursor;
        DEALLOCATE CustomerCursor;
      END

      -- 1. revisamos que clientes hay, para sacar el customer_num y pasar esos valores como parametro al SP
      SELECT * FROM dbo.customer;
      -- 2. ejecutamos el (SP, store procedure) y.. deberia insertar registros y/o actualizar la tabla customerStatistics
      EXECUTE dbo.actualizaEstadisticas 101,110;
      -- 3. verificamos que hayan habido cambios luego de ejecutar el SP
      SELECT * FROM dbo.customerStatistics;
    #+END_SRC
* Parte práctica
 #+BEGIN_SRC sql
   CREATE PROCEDURE actualizaEstadisticas  
		     @customer_numDES INT , @customer_numHAS INT 
   AS 
   BEGIN 
      DECLARE CustomerCursor CURSOR FOR 
 SELECT customer_num from customer WHERE customer_num  
		  BETWEEN @customer_numDES AND @customer_numHAS 
 
     DECLARE  @customer_num INT, @ordersqty INT, @maxdate DATETIME, 
		      @uniqueManufact INT; 
  
     OPEN CustomerCursor; 
     FETCH NEXT FROM CustomerCursor INTO @customer_num 
     WHILE @@FETCH_STATUS = 0 
     BEGIN 
    
	SELECT @ordersqty=count(*) , @maxDate=max(order_date)  
	  FROM orders 
	 WHERE customer_num = @customer_num; 
 
	 SELECT @uniqueManufact=count(distinct stock_num) 
	   FROM items i, orders o 
	  WHERE o.customer_num = @customer_num 
	    AND o.order_num = i.order_num;
 
	 IF NOT EXISTS( SELECT 1 FROM CustomerStatistics  
			 WHERE customer_num = @customer_num) 
 
     insert into customerStatistics  
		    values (@customer_num,@ordersQty, @maxDate,@uniqueManufact);
	 ELSE 
	 update customerStatistics   
		  SET  ordersQty=@ordersQty,maxDate=@maxDate,   
		 uniqueManufact= @uniqueManufact 
		   WHERE customer_num = @customer_num; 

	 FETCH NEXT FROM CustomerCursor INTO @customer_num 
     END; 
     CLOSE CustomerCursor; 
     DEALLOCATE CustomerCursor; 
    END
 #+END_SRC
