#+TITLE: Normalización
#+STARTUP: inlineimages
* Normalización
** Que es Normalizar
  - Llevar al modelo acorde al *Modelo Relacional*
  - Reducir la *redundancia* de datos (repetición) y las *inconsistencias*
  - Facilitar el *mantenimiento* de los datos
  - Evitar que se violen las *reglas de integridad*
  - Reduce la *perfomance* (/cuando se trata de grandes volumenes de datos/) pero... aumenta la *robustez*
** Que NO es Normalizar
   - Referirse al *tipo de dato* de los *atributos*, ni a su longitud
   - A la nomenclatura de los atributos/relaciones
     (/No establece seguir un criterio de nombres/)
* Resumen de todas las Formas Normales
  - NO es necesario seguir un orden para normalizar osea 1FN, 2FN, 3FN,..
    (/eso es sólo categorizar/identificarlas/)
  - La idea es *evitar información redundante*
  - Las preguntas que nos debemos hacer son
    1. Hay *dependencias funcionales* entre atributos? (ya sean clave o no-clave)
    2. Hay *grupos repetitivos* ó *atributos multivaluados*?

  #+BEGIN_SRC plantuml :exports results :file img/normalizacion-resumen.png
    @startuml
    title Normalización (1FN, 2FN, 3FN)

    note as 1FN
    ,**Canónica**
    ,* sin Atributos calculables

    ,**1FN**
    ,* sin Atributos multivaluados
    ,* sin Grupos repetitivos
    endnote

    note as 2FN
    ,**2FN**
    ,* 1fn
    ,* sin dependencia funcional/parcial
    entre atributos-clave

    "todos los atributos no-clave deben
    depender por completo de la PK"
    endnote

    note as 3FN
    ,**3FN**
    ,* 2fn
    ,* sin dependencia funcional/parcial
    entre atributos no-clave

    "los atributos no-clave que dependen
    de otros atributos no-clave se llevan
    a otra tabla"
    endnote

    note as N1
    ,**total** es un **atributo calculable**

    | precio   | cantidad | total        |
    | 2         |   5       | 5 * 2 = 10    |
    | 5         |   5       | 5 * 5 = 25    |

    ---

    ,**domicilio** es **multivaluado**

    |= cod_cliente   | domicilio     |
    | 001             | thames 55 2ºC |
    | 002             | thames 255 9ºC |

    ---

    ,**telefono1,telefono2,telefono3** actúa como vector

    |= cod_cliente      | telefono1    | telefono2    | telefono3    |
    | 001               | 4732110       |   4732111     |   4732119     |
    | 002               | 4732110       |   4732121     |   3732110     |

    ---

    ,**grupo repetitivo**

    |= cod_alumno  | nom_alumno   | nom_materia |
    | 001           | carlos    | matematica |
    | 001           | carlos    | fisica 1 |
    | 001           | carlos    | fisica 2 |
    | 002           | samuel    | algebra |
    endnote


    note as N2
    ,**nombre_materia** NO depende completamente de {id_alumno, id_materia}

    |= id_alumno |= id_materia  |   nombre_alumno |   nombre_materia |
    | 001       | 01            | perez             |   matematica      |
    | 002       | 02            | perez             |   algebra      |
    | 002       | 03            | perez             |   fisica      |
    | 003       | 03            | pedro             |   fisica      |

    en notación de **determinantes**
    id_alumno + id_materia -> nombre_alumno + nombre_materia

    debería ser dividirse en
    id_alumno -> nombre_alumno + id_materia
    id_materia -> nombre_materia

    ---

    ,**nombre_cliente** depende de **id_cliente** y éste no pertenece a la PK

    |= id_pedido    | id_cliente   | fecha_pedido  | nombre_cliente    |
    | 0001          | 001           | 05/09/12      | perez             |
    | 0002          | 001           | 05/11/12      | perez             |

    en notación de **determinantes**
    id_pedido + id_cliente -> fecha_pedido + nombre_cliente

    debería separarse en
    id_pedido -> id_cliente + fecha_pedido
    id_cliente -> nombre_cliente
    endnote

    N1 -up-> 1FN
    N2 -up-> 2FN
    N2 -up-> 3FN
    @enduml
  #+END_SRC

  #+RESULTS:
  [[file:img/normalizacion-resumen.png]]

* Forma Canónica
** Conceptos
  Consiste en eliminar los *atributos calculables* (/resultan del cálculo entre atributos/)
** Ejemplos
   #+BEGIN_QUOTE
   En esta tabla vemos que el atributo ~total~ es un *campo calculables* que resulta de operar ~cantidad*precio~
  #+END_QUOTE

  #+NAME: relacion-pedidos
  |-----------+----------+--------+---------|
  | id_pedido | cantidad | precio | *total* |
  |-----------+----------+--------+---------|
  |         1 |       10 |      5 |      50 |
  |         2 |       15 |      2 |      30 |
  |-----------+----------+--------+---------|
* (1FN) Primera Forma Normal
** Conceptos
   - Los campos deben ser *atómicos* (No pueden tener listados, ó colecciones)
   - NO puede haber *atributos multivaluados*
   - NO hay un orden en las fila (Ej. el ID=1, no está antes del ID=2)
   - NO hay un orden en las columnas
   - Las filas se identifican unicamente por las *claves candidatas*
   - Evitar *grupos repetitivos* ó *campos multivaluados* (/este segundo, también se llama "campo compuesto"/)
** Ejemplos
*** Ejemplo 1
    #+BEGIN_QUOTE
    La siguiente relación NO cumple la *(1FN)* porque cada *atributo* debe ser *atómico*
    y no se cumple en las dos primeras filas en el atributo *tipo*
    #+END_QUOTE

    #+NAME: relacion-sin-normalizar
    |-------------+---------+-------------|
    | id_producto | *tipo*  | descripcion |
    |-------------+---------+-------------|
    |           1 | A, B, C |             |
    |-------------+---------+-------------|
    |           2 | A, B    |             |
    |-------------+---------+-------------|
    |           3 | B       |             |
    |-------------+---------+-------------|
*** Ejemplo 2
   #+BEGIN_QUOTE
   Esta otra tampoco cumple la (1FN), porque el atributo ~material~ es *multivaluado*
   #+END_QUOTE

   #+NAME: relacion-sin-normalizar
   |-------------+------------+-------------|
   | id_producto | *material* | descripcion |
   |-------------+------------+-------------|
   |           1 | Piedra     |             |
   |             | Maderas    |             |
   |-------------+------------+-------------|
   |           2 | A          |             |
   |-------------+------------+-------------|
   |           3 | B          |             |
   |-------------+------------+-------------|
*** Ejemplo 3
  #+BEGIN_EXAMPLE
  Campos multivaluados en una entidad quedaría 

  PIZZAS
  gusto1
  gusto2
  gusto3
  gustoN

  quedando todos esos atributos como un arreglo, esto ya no se utiliza, y se debe evitar
  #+END_EXAMPLE
* (2FN) Segunda Forma Normal
** Conceptos
   1. Debe respetar la *(1FN)*
   2. NO debe haber [[Dependencia Funcional][dependencia funcional]] entre los *atributos clave*
      - NO tiene que haber dependencias parciales,
      - no puede haber un *atributo no-clave* que no dependa completamente de la (PK) *clave principal*
      - Si la (PK) es una *clave compuesta*, cada *atributo* debe depender por completo de ella
   3. Que TODOS los [[Determinante][determinantes]] sean [[Clave Candidata][claves candidatas]]
   4. Si la relación tiene una clave *compuesta* => entonces la [[Clave Compuesta][clave compuesta]] debe ser *determinante* de TODOS los *atributos no-clave*
      (/NO debe haber una dependencia parcial, de un atributo no-clave que dependa de un atributo clave A, pero no de la clave compuesta A+B/)
   5. NO debe haber *grupos repetitivos*

  #+BEGIN_QUOTE
  En otras palabras NO debe haber *dependencias parciales*,
  los *atributos no-claves* deben *depender completamente* de todos los elementos de la (PK) *clave principal*
  #+END_QUOTE
  
   *Observación:*
   El punto (2) y (3) significan lo mismo
** Ejemplos
*** Ejemplo 1
    #+NAME: entidad-pedido-gusto
    |-------------+------------+-----------------+-------------------|
    | =id_pedido= | =id_gusto= | cantidad_pizzas | descripcion_gusto |
    |-------------+------------+-----------------+-------------------|
    |           1 |          1 |               2 | salado            |
    |           1 |          2 |               2 | dulce             |
    |           1 |          3 |               1 | ~amargo~          |
    |           2 |          4 |               1 | picante           |
    |           2 |          3 |               1 | ~amargo~          |
    |           2 |          5 |               2 | ahumado           |
    |-------------+------------+-----------------+-------------------|

    #+BEGIN_QUOTE
    La (PK) *Clave Primaria* está formada por ~{id_pedido, id_gusto}~
    por tanto es una *clave compuesta* (porque tiene más de un atributo)
    y como NO se cumple que esa *clave compuesta* sea [[Determinantes][determinante]]
    de todos los *atributos no-clave*, no cumple con la *(2FN)*

    porque ~id_gusto->descripcion_gusto~ 
    pero =id_gusto= junto con =id_pedido= forman la *clave principal*
    entonces el atributo no-clave *descripcion_gusto* NO depende
    completamente de la *clave principal*, sólo de =id_gusto=
    #+END_QUOTE
 
    LLendo más en detalle...
    1. En notación los *determinantes* que observamos son
       ~id_gusto->descripcion_gusto~ y ~id_pedido+id_gusto->cantidad_pizzas~
    2. Es decir =id_gusto= es *determinante*, porque de él depende {descripcion_gusto}
       y la *clave compuesta* =id_pedido+id_gusto= también es *determinante* 
       porque de ella depende ~{cantidad_pizzas}~
    3. Por tanto NO cumple con la [[(2FN) Segunda Forma Normal][(2FN)]] porque 
       toda la clave compuesta =id_pedido+id_gusto= debe ser *determinante*
       de todos los *atributos no-clave*
       y ~descripcion_gusto~ NO depende de la *clave compuesta*, sólo de =id_gusto=
*** Ejemplo 2
   En la entidad Inscripciones a materias, observamos que
   la *clave primaria* es una [[Clave Compuesta][clave compuesta]] porque tiene 
   a {id_alumno, id_materia}

   id_alumno+id_materia->fecha_inscripcion
   id_alumno->nombre_alumno
  
   osea nombre_alumno no depende completamente de id_materia,
   por tanto no cumple con (2FN) 

   #+NAME: entidad-inscripciones
   |---------------+---------------+---------------+-------------------|
   | =PRIMARY KEY= | =PRIMARY KEY= |               |                   |
   |     id_alumno |    id_materia | nombre_alumno | fecha_inscripcion |
   |---------------+---------------+---------------+-------------------|
   |            01 |            01 | perez         | 01/02/2020        |
   |            01 |            02 | perez         | 01/02/2021        |
   |            02 |            01 | carlitos      | 03/03/2020        |
   |            02 |            03 | carlitos      | 05/09/2020        |
   |---------------+---------------+---------------+-------------------|

   #+BEGIN_QUOTE
   La solución es partir la relación en dos, y ahora ambas cumplen con (2FN)
   porque el *determinante* id_alumno+id_materia es (PK) *clave primaria* de todos los *atributos no-clave*
   en este caso solo de ~fecha_inscripcion~
   #+END_QUOTE

   #+NAME: entidad-inscripciones
   |---------------+---------------+-------------------|
   | =PRIMARY KEY= | =PRIMARY KEY= |                   |
   |     id_alumno |    id_materia | fecha_inscripcion |
   |---------------+---------------+-------------------|
   |            01 |            01 | 01/02/2020        |
   |            01 |            02 | 01/02/2021        |
   |            02 |            01 | 03/03/2020        |
   |            02 |            03 | 05/09/2020        |
   |---------------+---------------+-------------------|

   #+BEGIN_QUOTE
   y nos queda una entidad *Alumnos*,
   que clasificamos como *Entidad Fuerte* (ó Independiente)
   porque sus *atributos no-clave* dependen de su (PK) *clave primaria*
   y no tiene (FK) *clave foránea*
   #+END_QUOTE

   #+NAME: entidad-alumnos
   |---------------+---------------|
   | =PRIMARY KEY= |               |
   |     id_alumno | nombre_alumno |
   |---------------+---------------|
   |            01 | perez         |
   |            02 | carlitos      |
   |---------------+---------------|
** Dependencia Funcional
*** Conceptos
    - Cuando uno o varios atributos dependen completamente de otro (dependen funcionalmente)
    - El atributo (ó atributos) de los que dependen otros se llaman [[Determinante][determinantes]]
*** Notación
     1. Si A depende de B, se denota:  B->A
     2. Si A y B dependen de C, se denota: C->A,B
     3. Si nombre y precio dependen completamente de id_producto se denota id_producto->nombre,precio 

     *Observación:*
     El caso (1), el atributo B, se llama *determinante*
     En el caso (2) el atributo C, se llama *determinante*
*** Ejemplo
    #+BEGIN_QUOTE
    En la siguiente entidad *Pedidos* vemos como los atributos
    nombre y edad dependen completamente del atributo id_cliente.

    A su vez el atributo id_cliente depende completamente
    del atributo id_pedido (porque id_pedido es la clave primaria)
    #+END_QUOTE

    #+NAME: entidad-pedidos
    |------------------+------------+----------+------|
    |        id_pedido | id_cliente | nombre   | edad |
    | =Clave Primaria= |            |          |      |
    |------------------+------------+----------+------|
    |                1 |        100 | carlos   |   42 |
    |------------------+------------+----------+------|
    |                2 |        105 | pedro    |   19 |
    |------------------+------------+----------+------|
    |                3 |        109 | federico |   23 |
    |------------------+------------+----------+------|
** Determinantes
*** Conceptos
    El *atributo* (ó atributos) de los que *dependen completamente* otros atributos
    (/que dependen funcionalmente/)
*** Notación
     Si ~nombre~ y ~precio~ dependen completamente de ~id_producto~
     - se denota ~id_producto->nombre,precio~
     - y ~id_producto~ se denomina como *determinante*
*** Ejemplos
    #+BEGIN_QUOTE
    En la siguiente entidad *Producto Fabricante* vemos que la
    *Clave primaria* es una [[Clave Compuesta][clave compuesta]] por ~id_producto~ y ~id_fabri~
    
    donde ~desc_prod~ y ~id_fabri~ dependen de ~id_producto~,
    en notación sería: ~id_producto->desc_prod, id_fabri~

    además ~nombre_fabri~ depende de ~id_fabri~, en notación sería ~id_fabri->nombre_fabri~

    por tanto ~id_producto~ y ~id_cliente~ son *determinantes*
    #+END_QUOTE
 
    #+NAME: entidad-producto-fabricante
    |------------------+------------------+--------------------+--------------|
    |      id_producto |    id_fabricante | desc_prod          | nombre_fabri |
    | =Clave Primaria= | =Clave Primaria= |                    |              |
    |------------------+------------------+--------------------+--------------|
    |                1 |              101 | Para cortar madera | Pedro        |
    |------------------+------------------+--------------------+--------------|
    |                2 |              101 | Para pegar metal   | Pedro        |
    |------------------+------------------+--------------------+--------------|
    |                1 |              109 | Para cortar madera | Carlos       |
    |------------------+------------------+--------------------+--------------|
* (3FN) Tercera Forma Normal
** Conceptos
  - Debe respetar la (2FN)
  - NO puede haber [[Dependencial Funcional][dependencia funcional]] entre *atributos no-claves*
    (/Es decir.. no puede haber atributos no-claves que dependan parcialmente de algunos, y no de otros/)

  #+BEGIN_QUOTE
  Recordemos que en la ([[(2FN) Segunda Forma Normal][2FN)]] NO puede haber [[Dependencia Funcional][dependencia funcional]] entre los *atributos claves*.
  Osea los *atributos no-clave*, deben depender del conjunto de atributos de la (PK) clave principal
  NO pueden depender de un *atributo-clave*, y del otro no
  #+END_QUOTE
** Ejemplos 
    #+NAME: entidad-pedidos
    |-------------+------------+--------------+------------+---------------|
    | =id_pedido= | id_cliente | fecha_pedido | nombre_cli | domicilio_cli |
    |-------------+------------+--------------+------------+---------------|
    |           1 |          3 | 10/07/2020   | Pedro      | Palermo       |
    |           2 |          3 | 10/07/2020   | Pedro      | Palermo       |
    |-------------+------------+--------------+------------+---------------|

    #+BEGIN_QUOTE
    En la entidad Pedidos la *clave primaria* está formada solo por *id_pedido*
    id_cliente es un atributo no-clave (no pertenece a la clave principal)
    y además es [[Determinantes][determinante]] porque ~id_cliente->nombre_cli, domicilio_cli~
    Es decir hay [[Dependencia Funcional][dependencia funcional]] entre atributos no-claves
    para cumplir la (3FN) no puede pasar eso.
    #+END_QUOTE
  
    Más en detalle observamos lo siguiente:
    1. id_cliente es *determinante* de {nombre_cli, domicilio_cli}
       en notación sería ~id_cliente->nombre_cli, domicilio_cli~
    2. además id_pedido es *determinante* de {id_cliente, fecha_pedido}
       en notación sería ~id_pedido-> id_cliente, fecha_pedido~
    3. hay grupos de datos repetidos en las 2 últimas columnas

    #+BEGIN_QUOTE
    Para que la entidad Pedidos cumpla con (3FN), la partimos de manera que 
    "NO haya *dependencia funcional* entre *atributos no-clave*"
    #+END_QUOTE

    #+NAME: entidad-pedidos
    |-------------+------------+--------------|
    | =id_pedido= | id_cliente | fecha_pedido |
    |-------------+------------+--------------|
    |           1 |          3 | 10/07/2020   |
    |           2 |          3 | 10/07/2020   |
    |-------------+------------+--------------|

    #+NAME: entidad-clientes
    |--------------+------------+---------------|
    | =id_cliente= | nombre_cli | domicilio_cli |
    |--------------+------------+---------------|
    |            3 | Pedro      | Palermo       |
    |--------------+------------+---------------|
* (BCNF) Forma Normal Boyce & Codd
  - Se repite el *todo determinante debe ser clave candidata*

  #+BEGIN_COMMENT
  <<DUDA 1>>: Cuando volvemos a normalizar, en el ejemplo del pdf
  el nuevo atributo clave, se genera una 3ra entidad id_recepcionista y nombre?
  o se queda así?
  #+END_COMMENT
* (4FN) Cuarta Forma Normal 
* (5FN) Quinta Forma Normal
* Desnormalización
** Conceptos
  - Aumenta la *perfomance*
** Ejemplos
*** Ejemplo 1 (IMPORTANTE) - Factura y Renglón Factura
    #+BEGIN_QUOTE
    Aplicar la *normalización* puede en algunos casos *reducir la perfomance* 
    cuando se trata de grandes volumenes de datos..
    Un ejemplo podría ser si tenemos las entidades *FACTURA* y *RENGLON_FACTURA*

    En la cual tenemos que los atributos de *FACTURA* son
    1. (PK) *factura_numero*
    2. (PK) *factura_tipo*
    3. (PK) *factura_sucursal*
    4. (FK) factura_cliente
    5. facturacion_fecha
    6. facturacion_total <------- "campo calculado" indicio de que "NO ESTÁ NORMALIZADO" (/pero eso no es malo/)

    y los atributos de *RENGLON_FACTURA* son
    1. (PK) *renglon_numero*
    2. (FK) factura_numero
    3. (FK) factura_tipo
    4. (FK) factura_sucursal
    5. item_cantidad
    6. item_precio
    
    Donde la relación entre las entidades sería ~FACTURA -|--o<- RENGLON_FACTURA~
    - una *factura* puede tener uno ó muchos *renglones*
    - un *renglón* pertenece sólo a una *factura*
    #+END_QUOTE

    *Observaciones importantes:*
    1. Podemos notar que la (FK) en *RENGLON_FACTURA* es una *clave compuesta* porque debe contener "TODOS" los atributos de la (PK)
       a la que hace referencia, en este caso ~factura_numero~, ~factura_tipo~ y ~factura_sucursal~
    2. El campo ~facturacion_total~ es un *campo calculado* que NO fue *normalizado* para mejorar la perfomance
*** Ejemplo 2 - Precio congelado
  #+BEGIN_EXAMPLE
  Un ejemplo podria ser con los precios congelados,
  entre dos entidades FACTURA-RENGLON-PRODUCTO

  Donde los renglones de factura tendrían 
  el precio congelado, con el que se facturó

  Y los productos tendrian también el atributo precio
  pero sería con el valor actual (xq puede variar según
  el mercado)

  En este caso estamos desnormalizando,
  teniendo el mismo atributo en dos entidades,
  de forma intencional para poder distinguir lo dicho
  precio actual y precio congelado

  Si no quisieramos tener en cuenta eso,
  podriamos normalizar, y que el atributo precio
  solo aparezca en uno de los dos lados
  #+END_EXAMPLE
*** Ejemplo 3 - Telefonos
  #+BEGIN_EXAMPLE
  Si tuvieramos la entidad Alumno con un atributo telefono
  podriamos dejar Desnormalizado si no quisieramos tener
  una entidad especializada Telefono 
 
  Desnormalizado seria
  ALUMNO
  nombre
  telefono1
  telefono2

  Normalizado sería
  ALUMNO
  nombre

  Telefono
  cliente
  telefono1 
  telefono2
  #+END_EXAMPLE
* Glosario
  1. *Redundante:* Cuando algo se repite
