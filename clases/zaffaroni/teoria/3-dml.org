#+TITLE: DML - Data Manipulation Language
#+STARTUP: inlineimages
* SQL
  - Las siglas *SQL* hacen referencia a *Structured Query Language*
  - Es un (DBMS) *motor de base de datos* que incorpora un (DDL) *lenguaje de definición de datos*
  
  *Observación:*
  Una de las *reglas de CODD* impone que un (DBMS) *Data Base Managment System* (/motor de db/) debe tener
  - un (DDL) *lenguaje de definición de datos* (/CREATE, ALTER, .../)
  - un (DML) *lenguaje de manipulación de datos* (/SELECT, INSERT, UPDATE, DELETE, .../)

  #+BEGIN_SRC plantuml :exports results :file img/instrucciones-sql.png
    @startuml

    title SQL Instrucciones
    top to bottom direction 

    note as N1
    ,* SQL: Structured Query Language
    ,* DML: Data Manipulation Lenguaje
    ,* DDL Data Definition Language
    ,* TCL: Transactional Control Language
    endnote

    note as SQL
    Instrucciones-SQL
    endnote

    note as DDL
    DDL
    ,* CREATE
    ,* ALTER
    ,* DROP
    ,* TRUNCATE
    endnote

    note as DML
    DML
    ,* SELECT
    ,* INSERT
    ,* UPDATE
    ,* DELETE
    endnote

    note as TCL
    TCL
    ,* COMMIT
    ,* ROLLBACK
    endnote

    DDL -up-> SQL
    DML -up-> SQL
    TCL -up-> SQL

    @enduml
  #+END_SRC

  #+RESULTS:
  [[file:img/instrucciones-sql.png]]

* Tricks && Tips
** DER - Ejemplos Interesantes
*** Relación Recursiva
    #+BEGIN_SRC plantuml :file img/relacion-recursiva.png :exports results
      @startuml
      title DER - Relación recursiva
      hide circle
      skinparam linetype ortho

      note as N1
      ,**Productos**
      |= emp_codigo   | emp_nombre    | emp_salario   | emp_jefe  |
      | **001**           | carlos        | 150000         | NULL      |
      | 002           | fede          | 15000         | **001**      |
      | 003           | ricardo       | 25000         | **001**      |
      | 004           | samuel        | 5000         | **003**      |

      ,* El primer registro tiene emp_jefe en NULL 
      porque no tiene ningún jefe, es el jefe de todos
      ,* El empleado 002 y 003 tienen como jefe al 001
      ,* El empleado 004 tiene sólo un jefe, el 003
      endnote

      ''''''''''''''''''''''''''''''''''
      '' ENTIDADES

      entity "Empleado" as empleado {
         empleado_codigo: int
         --
         empleado_nombre: char(50)
         empleado_salario: decimal(4,2)
         empleado_jefe: int
      }

      ''''''''''''''''''''''''''''''''''
      '' RELACIONES

      empleado ||..|| empleado


      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/relacion-recursiva.png]]

*** Doble Relación
    #+BEGIN_SRC plantuml :file img/relacion-doble.png :exports results
      @startuml
      title DER - Relación doble
      hide circle
      skinparam linetype ortho

      note as N1
      ,**Productos**
      |= prod_id   | prod_detalle  | prod_precio   |
      | 001       | gaseosa         | 50           |
      | 002       | fritas        | 100           |
      | 003       | hamburguesa     | 300           |
      | **004**       | bigmac        | 700           |
      | **005**       | superbigmac        | 900           |

      --

      ,**Combos**
      |= combo_producto    |= combo_componente  | combo_cant    |
      | 004               | 001               | 2             |
      | 004               | 002               | 2             |
      | 004               | 003               | 1             |
      | 005               | 001               | 2             |
      | 005               | 002               | 3             |
      | 005               | 003               | 2             |

      Un combo puede estar compuesto por varios productos

      Ej. Una bigmac es un producto, que está formado por 
      tres productos: 2 fritas+ 2 gaseosas +hamburgesa
      endnote

      ''''''''''''''''''''''''''''''''''
      '' ENTIDADES

      entity "Producto" as producto {
         producto_id: char(8)
         --
         producto_detalle: char(50)
         producto_precio: decimal(4,2)
      }

      entity "Combo" as combo {
         combo_producto: char(8) <<FK>>
         combo_componente: char(8)
         --
         combo_cantidad: int
      }

      ''''''''''''''''''''''''''''''''''
      '' RELACIONES

      producto ||.down.o{ combo : R1
      producto ||.down.o{ combo : R2

      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/relacion-doble.png]]

** SELECT DISTINCT Vs Valor NULL
*** Conceptos
   - El ~SELECT DISTINCT~ cuenta al valor ~NULL~ como único valor
   - Si una columna tiene varios registros ~NULL~  => el ~SELECT DISTINCT~ mostrará sólo un ~NULL~ y los registros restantes

   #+BEGIN_QUOTE
   Si hacemos ~SELECT DISTINCT col~ con 10 registros, de los cuales 4 son ~NULL~
   mostrará sólo 1 registro con ~NULL~ y los registros restantes
   #+END_QUOTE
*** Ejemplo
    #+BEGIN_QUOTE
    Si hacemos ~SELECT country FROM Customers~ y éste nos devuelve lo siguiente
    #+END_QUOTE

    |-----------|
    | country   |
    |-----------|
    | argentina |
    | perú      |
    | bolivia   |
    | ~NULL~    |
    | ~NULL~    |
    | ~NULL~    |
    | ~NULL~    |
    |-----------|

    #+BEGIN_QUOTE
    Si repetimos la operación usando ~SELECT DISTINCT country FROM Customers~ obtendremos 
    sólo un registro con NULL, porque lo toma como un valor más
    #+END_QUOTE

    |-----------|
    | country   |
    |-----------|
    | argentina |
    | perú      |
    | bolivia   |
    | ~NULL~    |
    |-----------|
** GROUP BY Vs SELECT DISTINCT
*** Conceptos
    - Un ~SELECT DISTINCT col1~ filtra los registros duplicados de una columna específica
    - Un ~SELECT DISTINCT col1,col2,..~ filtra los registros duplicados de una combinación de varias columnas
    - El ~GROUP BY col1~ *agrupa según una columna* y NO muestra *grupos repetitivos* (/pongamos o no 1 ó varias columnas/)

    #+BEGIN_QUOTE
    Si usamos ~SELECT DISTINCT~ algunas variantes serían..

    1. Si hacemos ~SELECT DISTINCT col1 FROM Tabla~ es decir mostramos sólo 1 columna, 
    y sólo a esa le aplicamos ~DISTINCT~ entonces el resultado será registros sin repetir

    2. En cambio si hacemos ~SELECT DISTINCT col1, col2, col3 FROM Tabla~ donde mostramos 3 columnas,
    el ~DISTINCT~ actúa sobre las 3 columnas, y mostrará registros sin repetir entre la combinación
    de los datos entre ellas.
    Por lo cual puede llegar a repetirse datos de una o dos columnas, pero NO de las 3 columnas.
    #+END_QUOTE

    #+BEGIN_QUOTE
    Si usamos ~GROUP BY~  algunas variantes serían..

    1. Si ejecutamos ~SELECT col1, COUNT(col2) FROM Tabla GROUP BY col1~ agrupará por la primera columna
    evitando grupos repetidos (en función a la primera columna)
    y la cantidad de registros en donde la segunda columna tiene un valor, si tuviese NULL lo cuenta una única vez
    (/si hubiese registros donde el valor de la segunda columna se repite, los contará también/)
   
    2. Si realizamos ~SELECT col1, COUNT(DISTINCT col2) FROM Tabla GROUP BY col1~ mostrará la misma cantidad
    de registros que la anterior consulta, con la diferencia que sólo contará cuando el valor
    de la segunda columna sea diferente.
    Esto es útil por ej. si queremos agrupar por el nombre de un producto, y queremos saber la cantidad
    de clientes diferentes lo compraron, suponiendo que alguno de los clientes compraron varias veces el mismo producto,
    sólo contaríamos 1 vez por cada cliente.
    #+END_QUOTE

    #+BEGIN_QUOTE
    Diferencias???
    La diferencia entre si usar ~GROUP BY~ ó solo ~SELECT DISTINCT~ está en que si modificamos la query anterior así
    1. le sacamos el ~GROUP BY~ 
    2. le dejamos la *función de agregación* ~COUNT~
    3. usamos un ~SELECT DISTINCT~ 

    El resultado será TOTALMENTE DIFERENTE..!

    Probamos con ~SELECT DISTINCT col1, COUNT(col2) FROM Tabla~ el resultado será sólo 1 registro,
    donde el valor de la segunda columna será la cantidad total de registros de la tabla,
    y el valor de la primera NO TENDRÁ NINGUNA RELACIÓN con la segunda
    #+END_QUOTE
*** Ejemplos
**** Ejemplo 1
    #+BEGIN_SRC sql
      -- Mostramos los productos que tengan nombre diferente
      -- evitamos ver filas con nombre repetido
      --
      -- Diferencias con el GROUP BY:
      -- 1. La "función de agregación" count(*) hará que se muestre un sólo registro
      -- que es la cantidad de productos en total
      --
      -- 2. Mostrará en las dos primeras columnas ProductName y Price,
      -- el primer registro de ordenar la tabla por nombre de forma ascendente
      -- (no tiene relación alguna con el resultado del COUNT(), que muestra el total de productos)
      SELECT DISTINCT(ProductName), Price, count(*)
        FROM Products
       ORDER BY 1 ASC;

      -------------------------------------------------------------------------------------------------

      -- Agrupamos los productos por nombre y precio
      -- evitamos ver filas repetidas
      --
      -- Diferencias con el DISTINCT:
      -- 1. Mostrará cada producto sin repetir (porque lo agrupa por nombre y precio),
      -- y este COUNT(*) muestra en cada fila, la cantidad de veces que aparece repetido el producto
      SELECT ProductName, Price, count(*)
        FROM Products
       GROUP BY ProductName, Price
       ORDER BY 1;
    #+END_SRC
**** Ejemplo 2 - Select
     #+BEGIN_QUOTE
    ~SELECT ProductName, Quantity FROM OrderDetails ORDER BY 1 ASC, 2 ASC~
    Mostramos de los pedidos cada producto por nombre y cantidad
    #+END_QUOTE

    |-------------+----------|
    | ProductName | Quantity |
    |-------------+----------|
    | Manzana     | ~10~     |
    | Manzana     | ~10~     |
    | Manzana     | 15       |
    | Pera        | ~5~      |
    | Pera        | ~5~      |
    | Pera        | 20       |
    |-------------+----------|
**** Ejemplo 3 - Select con DISTINCT
     #+BEGIN_QUOTE
    ~SELECT DISTINCT ProductName, Quantity  FROM OrderDetails ORDER BY 1 ASC, 2 ASC~
    Mostramos de los pedidos cada producto por nombre y cantidad.
    Pero NO mostramos los que se repitan por nombre y cantidad
    #+END_QUOTE

    |-------------+----------|
    | ProductName | Quantity |
    |-------------+----------|
    | Manzana     |       10 |
    | Manzana     |       15 |
    | Pera        |        5 |
    | Pera        |       20 |
    |-------------+----------|
**** Ejemplo 4 - Select + Función de Agregación
    #+BEGIN_QUOTE
    ~SELECT ProductName, SUM(Quantity) Cantidad_total FROM OrderDetails ORDER BY 1~
    Mostramos de todos los pedidos la cantidad total de cada producto
    (no hay ninguna relación entre el nombre del producto con el total,
    aparece sólo un registro porque la "función de agregación" ~SUM()~ devuelve un resultado
    a menos.. que usemos ~GROUP BY~ y mostrará de cada producto)
    #+END_QUOTE

    |-------------+----------------|
    | ProductName | Cantidad_Total |
    |-------------+----------------|
    | Manzana     |             65 |
    |-------------+----------------|
**** Ejemplo 5 - Select + Distinct + Función de Agregación
    #+BEGIN_QUOTE
    ~SELECT DISTINCT ProductName, SUM(Quantity) Cantidad_total FROM OrderDetails ORDER BY 1~
    Vemos que con ó sin ~DISTINCT~ el resultado es el mismo,
    porque debemos agrupar los registros con ~GROUP BY~
    #+END_QUOTE
    |-------------+----------------|
    | ProductName | Cantidad_Total |
    |-------------+----------------|
    | Manzana     |             65 |
    |-------------+----------------|

**** Ejemplo 6 - Select + Función de Agregación
    #+BEGIN_QUOTE
    ~SELECT ProductName, COUNT(*) Cantidad_total FROM OrderDetails ORDER BY 1~

    Lo mismo que sucedía en el ejemplo anterior, no tiene relación el resultado del ~COUNT(*)~
    con el registro de la primera columna
    #+END_QUOTE

    |-------------+----------------|
    | ProductName | Cantidad_Total |
    |-------------+----------------|
    | Manzana     |              6 |
    |-------------+----------------|
**** Ejemplo 7 - Select + GROUP BY + Función de Agregación
    #+BEGIN_QUOTE
    ~SELECT ProductName, SUM(Quantity) Cantidad_total FROM OrderDetails GROUP BY ProductName ORDER BY 1~
    Al agrupar ahora si podemos ver de todos pedidos, cada producto y su cantidad total
    #+END_QUOTE
    |-------------+----------------|
    | ProductName | Cantidad_Total |
    |-------------+----------------|
    | Pera        | 30             |
    | Manzana     | 35             |
    |-------------+----------------|
**** Ejemplo 8 - Select + GROUP BY + Función de Agregación con DISTINCT
     Mostramos de todos los productos, cuantos clientes diferentes los compraron

     #+BEGIN_SRC sql
     SELECT ProductName, count(*), count(DISTINCT CustomerID)
     FROM Products p
     JOIN OrderDetails od ON p.ProductID = od.ProductID
     JOIN Orders o ON o.OrderID = od.OrderID
     GROUP BY ProductName
     #+END_SRC

     #+BEGIN_QUOTE
     La tabla sin el ~GROUP BY~ para ver la repetición de los registros con todas las columnas,
     observamos como los primeros 3 registros se repite la venta al mismo cliente,
     #+END_QUOTE

    |-----------+-------------+---------+----------+------------+----------|
    | ProductID | ProductName | OrderID | Quantity |  OrderDate | ClientID |
    |-----------+-------------+---------+----------+------------+----------|
    |         1 | Manzana     |     100 |       10 | 01-10-2009 | ~001~    |
    |         1 | Manzana     |     102 |       15 | 15-11-2010 | ~001~    |
    |         1 | Manzana     |     102 |       15 | 29-11-2011 | 002      |
    |-----------+-------------+---------+----------+------------+----------|

    #+BEGIN_QUOTE
    Cuando hagamos el ~COUNT(DISTINCT CustomerID)~ contará sólo dos registros,
    el motor los registros algo similar a esto
    #+END_QUOTE

    |-----------+-------------+----------|
    | ProductID | ProductName | ClientID |
    |-----------+-------------+----------|
    |         1 | Manzana     | ~001~    |
    |         1 | Manzana     | 002      |
    |-----------+-------------+----------|

    #+BEGIN_QUOTE
    Por lo tanto el resultado de la query del principio sería algo asi..
    ponemos las dos columnas con y sin ~DISTINCT~ para diferenciar el resultado,
    - la tercera columna muestra los registros repetidos (cosa que no queremos)
    - la cuarta columna muestra el resultado deseado
    #+END_QUOTE

    |-----------+-------------+----------+----------------------------|
    | ProductID | ProductName | count(*) | count(DISTINCT CustomerID) |
    |-----------+-------------+----------+----------------------------|
    |         1 | Manzana     |        3 |                          2 |
    |-----------+-------------+----------+----------------------------|
** SQL Secuencialidad
   #+BEGIN_QUOTE
   Una forma de intepretar como SQL ejecuta las consultas de manera algorítmica sería
   1. Evalúa la tabla del ~FROM~ para tener el dominio, el conjunto de datos
   2. Filtra el conjunto del dominio/universo si hubiese un ~WHERE~
   3. Agrupa por columna si tuviese un ~GROUP BY~
   4. Filtra del los datos agrupados con ~HAVING~
   5. Ordena el conjunto

   Si hiciera un *producto cartesiano* se anidaría la tabla con otro for
   #+END_QUOTE
  
   #+BEGIN_SRC c
   for(not EOF Tabla) // iteraria sobre cada fila de la tabla del FROM
      if WHERE // filtraría por una o varias condiciones
                AAA // cada A sería un registro
  
   for(not EOF Tabla) // iteraría nuevamente por cada fila, y las agruparía según la columna de GROUP BY
      if HAVING // filtraría cada fila agrupada 
                BBB 

    ORDER BY (BBB)
   #+END_SRC
* Operador INSERT
** Inserción unitaria
*** Conceptos
    + Es opcional agregar los nombres de las columnas
    + Si NO agregamos la *lista de columnas* de los datos a insertar 
      * Podemos tener problemas si se agregaron/borraron columnas
        (porque podemos insertar datos en una columna incorrecta)
      * Nos obliga a poner los valores en el mismo orden que como
        fueron definidas las columnas de la tabla
        (*acoplando* la consulta al modelo/definición de la tabla
      * Puede agregarnos como dato el valor ~NULL~
    + Si agregamos la *lista de columnas* de los datos a insertar
      estamos *desacoplando* la instrucción de la *definición de la tabla*

    *Observación:*
    - Se recomienda agregarle los nombres de las columnas
    - Podemos evitar pasar los nombres de las columnas, a aquellos campos
      que sabemos que tienen un ~DEFAULT~ definido, ó que no interesa
      si su valor es ~NULL~
*** Sintáxis SQL
     #+BEGIN_SRC sql
       -- las expresiones entre corchetes [] son opcionales
       INSERT INTO Nombre_tabla [(lista decolumnas)]
       VALUES (lista de valores);
     #+END_SRC
  #+BEGIN_SRC sql
    -- "INTO" es opcional, cuando queremos definir las columnas
    -- podemos alterar el orden de las columnas
    INSERT INTO tabla (col1, col2, ..., coln)
    VALUES (valor1, valor2, ..., valorn);

    -- Si sólo queremos insertar los valores
    -- debemos respetar el orden de las columnas
    -- de la definición de la tabla
    INSERT tabla VALUES (valor1, valor2, ..., valorn)
  #+END_SRC
*** Ejemplo
    #+BEGIN_SRC sql
      -- si no le pasamos las columnas, puede "quizas" funcionar,
      -- pero.. NO se recomienda porque
      -- 1. pueden "NO matchear con los tipos" definidos de las columnas
      -- definidas en la tabla
      -- 2. completará con NULL, los campos que nos olvidemos agregar
      -- 3. podemos estar ingresado datos en una columna erronea
      -- apesar que los tipos coincidan
      INSERT INTO product_types
        VALUES (375, 'short baño');

      -- le pasamos las columnas
      INSERT INTO product_types (stock_num, description)
      VALUES (375, 'short baño');
    #+END_SRC
** Inserción masiva
*** Conceptos
    Podemos combinar las operaciones ~select~ con ~insert~ 
    1. Indicamos la tabla destino con ~insert~
    2. seguido de ~select~ le pasamos el conjunto de datos

    *Observación:*
    - NO se recomienda utilizar el asterísco en el ~select~
      podría traernos columnas que no queremos, y que 
      no coinciden con la tabla destino
*** Ejemplos
    #+BEGIN_SRC sql
      -- insertamos en base a una query
      -- 1. NO se recomienda usar el asterisco * en el SELECT
      -- Obs: CUIDADO CON LOS PARENTESIS.. NO ES UNA "SUBQUERY", eso produce un error sintáctico
      INSERT INTO closed_orders
                  SELECT * FROM orders
                    WHERE paid_date IS NOT null;

      INSERT INTO closed_orders
                  (SELECT (order_num, order_date) FROM orders
                    WHERE paid_date IS NOT null);
    #+END_SRC
** Constraint Default
   si NO le agregamos la *lista de columnas* al ~insert~, entonces los datos de las columnas faltantes tendrán
   1. los valores ~NULL~ (/por defecto/)
   2. ó el que hayamos indicado en el ~CONSTRAINT DEFAULT~  (/al momento de definir la tabla/)
* Operador DELETE
** Conceptos
   #+BEGIN_QUOTE
   La clausula ~WHERE~ es opcional, pero..
   si no se agrega se actualizarán *todas las filas* de la tabla
   #+END_QUOTE
  
    *Observación:*
    Cuidado con la *integridad referencial* por las (PK y FK)

   #+BEGIN_COMMENT
   <<DUDA 1>>: Entonces q sucede? se puede o no?
   Si tratamos de borrar filas donde las PK estan referencias por otra
   tabla (osea son FK en otra) seguramente no nos deje borrar
   por lo de *integridad referencial*
   #+END_COMMENT
** Sintáxis SQL
  #+BEGIN_SRC sql
    DELETE FROM nombre_tabla
                [WHERE condiciones];
  #+END_SRC
** Ejemplo
   #+BEGIN_SRC sql
     DELETE FROM customer
      WHERE customer_num = 266; -- ok
   #+END_SRC
 #+BEGIN_SRC sql
   -- el "FROM" es opcional
   -- (aunque depende del motor)
   DELETE FROM tabla
    WHERE condicion;

   DELETE tabla
    WHERE condicion;
 #+END_SRC
* Operador SELECT
** Estructura
   #+BEGIN_SRC sql
     SELECT * -- lista de columnas
     FROM tabla -- tabla o lista de tablas
     WHERE condiciones_filtros
     GROUP BY columnas_de_agrupamiento
     HAVING condiciones_sobre_lo_agrupado
     ORDER BY columnas_clave_de_ordenamiento
   #+END_SRC
** Alias de Columnas
   - También se conocen como *etiquetas*

   #+BEGIN_SRC sql
     -- precioConIva es el alias
     -- en el resultado de la consulta aparecerá esa columna
     SELECT num_prod, precio*0.21 as precioConIva
     FROM products
   #+END_SRC
** Concatenar columnas
   Utilizamos el operador ~+~ (suma)

   #+BEGIN_SRC sql
     SELECT c.dni, c.nombre+ ', ' +c.apellido
     FROM clientes as c
   #+END_SRC
* Operador UPDATE
** Conceptos
   #+BEGIN_QUOTE
   La clausula ~WHERE~ es opcional, por tanto si no se agrega..
   se actualizarán *todas las filas* de la tabla
   #+END_QUOTE
** Sintáxis SQL
  #+BEGIN_SRC sql
    UPDATE nombre_tabla
       SET columna=valor[, columna=Valor...],
           [WHERE condiciones];
  #+END_SRC
** Ejemplo
   #+BEGIN_SRC sql
     UPDATE customer
        SET company = 'UTN', phone ='555'
      WHERE customer_num = 112; -- OK

     -- aumentamos el precio en un 20%
     UPDATE products
        SET precio = precio * 1.20
      WHERE code = 'ANZ'; -- OK

     -- DANGER...!
     -- este update sin where es PELIGROSO
     -- modifica todas las filas
     UPDATE empleados
            SET apellido='pepe';
   #+END_SRC
* WHERE - Condiciones
  Se agregan en el WHERE

  |-------------------------+------------------------------------------|
  | Condiciones             | Descripcion                              |
  |-------------------------+------------------------------------------|
  | =, !=, <>, <, <=, >, >= | operadores relacionales, de igualdad, .. |
  |-------------------------+------------------------------------------|
  | AND, OR, NOT            | Operadores lógicos                       |
  |-------------------------+------------------------------------------|
  | [NOT] LIKE              | Para validar cadenas                     |
  | [NOT] BETWEEN           | Para rangos                              |
  | [NOT] IN                | Saber si está una lista de valores       |
  | IS [NOT] NULL           |                                          |
  |-------------------------+------------------------------------------|
** Operadores Logicos/Relaciones/Otros
  #+BEGIN_SRC sql
    SELECT * FROM products as p
    WHERE p.price >= 100 AND p.price < 500;

    SELECT * FROM products as p
    WHERE p.price BETWEEN 100 AND 500;

    SELECT * FROM products as p
    WHERE p.category IN (1,4,9)
  #+END_SRC
** Operador LIKE
   Validar cadenas de caracteres, conceptualmente similar a las regexp
   aunque sintáticamente diferente

   |-------------------------------+------------------------------------------------------|
   |                               | Descripción                                          |
   |-------------------------------+------------------------------------------------------|
   | apellidoColumna LIKE 'A%'     | Apellidos que empiecen con A                         |
   | apellidoColumna LIKE '%sh%'   | Apellidos que contengan la palabra sh                |
   | apellidoColumna LIKE 'A_ _ _' | Apellidos que empiecen con A seguido de 3 caracteres |
   |                               | (sin los espacios, se agregan a modo de ejemplo)     |
   | apellidoColumna LIKE '[AEO]%' | Apellidos que empiecen con A ó con E ó con O         |
   | apellidoColumna LIKE '[A-O]%' | Apellidos que empiecen entre la A y la O             |
   |-------------------------------+------------------------------------------------------|

  #+BEGIN_QUOTE
  elegimos cualquier palabra que empiece con A
  seguido de cero o mas caracteres (actúa como clausula de kleene, comodin)
  ~LIKE 'A%'~

  palabras que contengan th en cualquier lado
  ~LIKE '%th%'~

  palabras que comiencen con A y contenga 4 letras (incluyendo la A)
  cada guión bajo repesenta cada caacter
  ~LIKE 'A_ _ _'~

  que comience con A ó E, 
  seguido de cero o mas caracteres
  ~LIKE '[AE]%'~

  que comience con caracteres entre A y E,
  seguido de cero o mas caracteres
  ~LIKE '[A-E]%'~
  #+END_QUOTE
   
   *Observación:*
   El símbolo ~%~ (porcentaje) actúa como el comodín de las regexp osea como la
   *clausula de kleene*. Es decir % representa cero o más caracteres
* ORDER BY - Ordenamiento
** Conceptos
  - Ordena por columna los resultados
  - Podemos ordenar de manera
    - ascendente (por default) {1,2,3,4...}
    - ó descendente {10,9,8,...}
  - Podemos ordenar por
    - nombre de columna
    - número de columna

  *Observación:*
  Se pueden ordenar las columnas que estén o no en el ~SELECT~
  (Ej. ~SELECT col1,col2 FROM tabla ORDER BY col3~)
** Ejemplos
  #+BEGIN_SRC sql
    -- Ordenamos por nombre de columna
    SELECT dni, nombre, apellido
    FROM clientes
    ORDER BY nombre, apellido;

    -- Ordenamos por la columna 2 y 3
    SELECT dni, nombre, apellido
    FROM clientes
    ORDER BY 2, 3;

    -- ordenar el resultado por columnas
    -- de forma descendente
    SELECT *
      FROM clientes
     ORDER BY ciudad, apellido DESC;

    -- con DISTINCT
    -- listamos valores unicos
    -- (elimina registros repetidos)
    SELECT DISTINCT
      FROM clientes
     ORDER BY ciudad, apellido DESC;
  #+END_SRC
* DISTINCT - Registros Repetidos
  - Utilizamos el operador *distinct* para evitar repetición de registros
  - Es útil cuando hacemos un ...

  #+BEGIN_SRC sql
    -- no repite los registros que tengan la columna "numero" repetida
    SELECT DISTINCT p.numero, p.nombre
    FROM productos as p
    ORDER BY 1; -- ordena por la primera columna (osea columna llamada numero)
  #+END_SRC
* Funciones de Agregación
*** Conceptos
    - Son funciones que dado un conjunto de datos (uno o más registros)
      realizan *operaciones agregadas*
    - Se utilizan bastante en conjunto con operador *GROUP BY* y *HAVING*
    
    *Observación:*
    NO se pueden anidar *funciones de agregación*
    (/Ej. Sintácticamente estaría mal poner MAX(SUM(col)), MIN(SUM(col))/)

    |-------------------------+-----------------------------------------------------------------------|
    | Funcion Agregada        | Descripción                                                           |
    |-------------------------+-----------------------------------------------------------------------|
    | SUM(columna)            | Suma el valor de esa columna (de cada registro)                       |
    | COUNT(*)                | Cuenta la cantidad total de registros                                 |
    | MIN(columna)            | Encuentra el valor mínimo de la columna                               |
    | MAX(columna)            | Encuentra el valor máximo de la columna                               |
    | AVG(columna)            | Calcula un valor promedio de la columna por el valor de cada registro |
    |-------------------------+-----------------------------------------------------------------------|
    | COUNT(columna)          | Cuenta la cantidad de registros de esa columna (no nulos)             |
    |-------------------------+-----------------------------------------------------------------------|
    | COUNT(DISTINCT columna) | Cuenta la cantidad de registros (no cuenta los que se repitan)        |
    |-------------------------+-----------------------------------------------------------------------|
*** Ejemplos
   #+BEGIN_SRC sql
     -- con todos estos queries
     -- solo va a mostrar las columnas

     SELECT COUNT(DISTINCT cliente_num)
       FROM clientes;

     SELECT COUNT(cliente_num)
       FROM clientes;

     SELECT MAX(pedido_fecha)
       FROM clientes;

     SELECT MAX(pedido_fecha) ultimaCompra,
            MIN(pedido_fecha) primerCompra
       FROM clientes;
   #+END_SRC
* Cláusula GROUP BY
  - Se suelen complementar con las [[Funciones Agregadas][funciones de agregación]]
  - La [[Cláusula Having][cláusula HAVING]] actúa como el ~WHERE~ con el ~SELECT~

  #+BEGIN_SRC sql
    SELECT p.numero_pedido, count(*) as cantidad
    GROUP BY p.numero_pedido -- los agrupa por el numero pedido
    ORDER BY 1; -- ordena de forma ascendente por la primera columna (osea numero_pedido)

    SELECT p.numero_pedido, YEAR(p.fecha_pedido), MONTH(p.fecha_pedido)
    FROM pedidos as p
    GROUP BY YEAR(p.fecha_pedido), MONTH(p.fecha_pedido);
  #+END_SRC
* Cláusula HAVING
** Conceptos
   - Actúa en la cláusula [[Cláusula GROUP BY][GROUP BY]] como el where con el select, PERO con el ~GROUP BY~
   - Requiere de condiciones con [[Funciones Agregadas][funciones agregadas]]

   #+BEGIN_SRC sql
     SELECT p.numero_pedido, count(*) as cantidad
     GROUP BY p.numero_pedido
     HAVING count(*) >= 5 -- filtra por los que se repitan 5 ó mas veces
     ORDER BY 1;

     SELECT p.numero_pedido, YEAR(p.fecha_pedido), MONTH(p.fecha_pedido)
     FROM pedidos as p
     GROUP BY YEAR(p.fecha_pedido), MONTH(p.fecha_pedido);
   #+END_SRC
** Ejemplos
  EL having actua como el where con select, PERO CON group by

  #+BEGIN_SRC sql
    SELECT YEAR(order_date) anio,
           MONTH(order_date) mes,
           COUNT(order_date) cant
      FROM pedidos
      GROUP BY YEAR(order_date);
  #+END_SRC
* Ejemplos
  #+BEGIN_SRC sql
    -- is null
    -- NO hay que igualar a null
    select * from tabla IS NULL;

    -- para elegir entre un rango de numeros
    select * FROM tabla
     WHERE order_num between 10 AND 100;

    -- alternativa al between
    select * FROM tabla
     WHERE order_num >= 10 AND order_num <= 100;

    -- elegimos valores que sean alguno de esos tres
    SELECT * FROM tabla
     WHERE order_num IN (10,15,20);

    -- alternativa al IN() aunque no sería eficiente
    -- SELECT * FROM tabla
    -- WHERE order_num = 10 OR order_nu = 15 OR order_num = 20;

    -- el % reemplaza cero o mas caracteres (sería la clausula de kleene)
  #+END_SRC
* Parte práctica
  #+BEGIN_SRC sql
    -- ej. 3
    select distinct city
      from cliente
     where state ='ca'
     order by city;

    -- ej 5
    select fname, lname, c.address1, c.address2
      from customer c whee customer_num =103;

    -- ej. 6
    select p.stock_num, p.unit_price, p.unite_code
             from products_p
     where p.manu_code ='ANZ'
     order by p.unite_code;

    -- ej. 7
    select distinct manu_code
      from items
     order by 1;

    -- ej. 8
    select o.order_num, o.order_date, o.customer_num,
           o.ship_date
      from order o
     where o.paid_state is null
       and o.ship_date >= '2015-01-01'
       and o.ship_date < '2015-07-01'
           oder by 1;
    -- otra alternativa al anterior
    select order_num, order_date, customer_num, ship_date
      from order
     where paid_date
           IS NULL
           and year(ship_date) =2015
           and month(ship_date) between 1 and 6;
    -- ej. 9
    select c.customer_num, c.company
             from customer c
             where c.company like '%town%';
      -- ej. 10
    select max(o.ship_charge) maximo,
           min(o.ship_charge) minimo,
           avg(o.ship_charge) promedio
             from orders o;
    -- ej 11
    select o.order_num, o.ode_date, o.ship_date
     from orders o
     where year(o.ship_date) = year(o.order_date)
     and month(o.ship_date) = month(o.order_date);

    -- ej 12
    -- SIEMPRE LO QUE AGREGEMOS EN GROUP BY
    -- debe figurar en el SELECT
    --
    -- si NO agregamos una columna en el group by
    -- lanza error
    select o.customer_num, o.ship_date, count(*),
           sum(o.ship_charge) total,
     from orders o
     group by o.customer_num, o.ship_date
     order by total desc;

    -- ej 13
    select o.ship_date, sum(o.ship_weight) pesoTotal
      from orders o
     group by o.ship_date
    having sum(o.ship_weight) >= 30
           order by pesoTotal DESC;
  #+END_SRC
* Preguntas resueltas
** Pregunta (1)
   #+BEGIN_QUOTE
   que admita ~NULL~, es lo mismo que en el DER aparezca modalidad opcional?
   si por default todos son ~NOT NULL~, en el DER serian todos modalidad obligatoria? 
   #+END_QUOTE

   *Respuesta*: Si en ambos
