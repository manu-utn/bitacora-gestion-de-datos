#+TITLE: Clase 02 - Normalización

* Diseño de datos
** Entidades
   
** Relaciones
*** Según CODD
    - La denomina *relaciones*, pero al implementar
      se les llama *Entidad*
*** Implementación
    - Se denominan como *Entidad*
*** Conceptos
    - Para relacionar dos entidades
    -  
* Modelo Conceptual
** Conceptos
   Definimos las entidades y relaciones en base al negocio
** Diseño Lógico
** Diseño Fisico
** Repasando DER
*** Entidad
*** Atributos
*** Atributos multivaluados
*** Instancias de una entidad
*** Relaciones entre entidades
    representan asociaciones entre entidades
    en el mundo real
* Características de las Relaciones
** Grado
*** Unaria
    - También llamada *recursiva*
    - La entidad se relaciona consigo misma,
      se *autoreferencia*
    
    #+BEGIN_EXAMPLE
    Algunos ejemplos podrían ser
    
    La relación de la entidad Empleado con Empleado,
    donde un empleado puede tener a cargo ninguno
    o varios empleados.
    OJO..! la PK NO deberia ser "NOT NULL",
    porque no se podría cargar el primer empleado

    y también entra el concepto de *integridad referencial*
    #+END_EXAMPLE
*** Binaria
    La mayoria lo sona

    #+BEGIN_EXAMPLE
    Un ejemplo sería la relación de la entidad
    Cliente Factura,
    donde un Cliente puede tener muchas facturas,
    y una Factura debe pertenecer sólo a un Cliente
    #+END_EXAMPLE
*** N-Aria
    Se relaciona N entidades,

    #+BEGIN_EXAMPLE
    La relación entre las entidades
    Cursadas, Alumnos, Cursos y Materias
    #+END_EXAMPLE
** Cardinalidad
   - La cantidad de instancias de entidad que puede
     relacionarse con otras entidades
   - Cuando tenemos una relación Muchos a Muchos,
     solemos usar una *entidad asociativa*

   #+BEGIN_EXAMPLE
   1 a 1
   
   1 a N

   N a N
   #+END_EXAMPLE
** Modalidad
*** Conceptos
*** Opcional
*** Obligatoria
** Especialización ó Generalización
   Cuando separamos en supertipo-subtipo
   donde tenemos una entidad padre y 2 o más entidades hijas
   donde esas entidades hijas tienen comportamiento diferente






* Normalizar
  - Reduce la *perfomance*
  - Pero aumenta la *robustez*
* (1FN) Primera forma normal
  - Evitar grupos repetitivos ó campos multivaluados

  #+BEGIN_EXAMPLE
  Campos multivaluados en una entidad quedaría 

  PIZZAS
  gusto1
  gusto2
  gusto3
  gustoN

  quedando todos esos atributos como un arreglo,
  esto ya no se utiliza, y se debe evitar
  #+END_EXAMPLE
* (2FN) Segunda forma normal
  - Debe respetar la (1FN)
  - NO debe haber *dependencias funcionales* 
    entre *atributos claves*

  Osea NO debe haber dependencias parciales,
  los atributos no-claves deben depender completamente
  de todos los elementos de la clave principal
  (Si la PK es una clave compuesta, cada atributo
  debe depender por completo de ella)
* (3FN) Tercera forma normal
  - Debe respetar la (2FN)
  - NO debe haber *dependencias funcionales*
    entre *atributos no-claves*

  Osea no puede haber atributos no-claves 
  que dependan parcialmente de algunos, y no de otros
  






* Desnormalización
  - Aumenta la *perfomance*

  #+NAME: ejemplo-precio-congelado
  #+BEGIN_EXAMPLE
  Un ejemplo podria ser con los precios congelados,
  entre dos entidades FACTURA-RENGLON-PRODUCTO

  Donde los renglones de factura tendrían 
  el precio congelado, con el que se facturó

  Y los productos tendrian también el atributo precio
  pero sería con el valor actual (xq puede variar según
  el mercado)

  En este caso estamos desnormalizando,
  teniendo el mismo atributo en dos entidades,
  de forma intencional para poder distinguir lo dicho
  precio actual y precio congelado

  Si no quisieramos tener en cuenta eso,
  podriamos normalizar, y que el atributo precio
  solo aparezca en uno de los dos lados
  #+END_EXAMPLE

  #+NAME: ejemplo-telefonos
  #+BEGIN_EXAMPLE
  Si tuvieramos la entidad Alumno con un atributo telefono
  podriamos dejar Desnormalizado si no quisieramos tener
  una entidad especializada Telefono 
 
  Desnormalizado seria
  ALUMNO
  nombre
  telefono1
  telefono2

  Normalizado sería
  ALUMNO
  nombre

  Telefono
  cliente
  telefono1 
  telefono2
  #+END_EXAMPLE
