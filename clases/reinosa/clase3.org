#+TITLE: Clase 03 - Métodos de Clasificación

#+BEGIN_COMMENT
Dudas:
1. Pag. 19: porque dice que H_1=1 hace referencia al *ordenamiento por inserción*?

2. En la clase de complejidad P y NP se dice tienen un conjunto de *problemas de decisión*
donde la *complejidad P* que se resuelve como una funcion lineal (porque lo resuelve una maquina determinista)
y la *complejidad NP* como un *arbol de decisión* (porque lo resuelve una maquina NO determinista)
#+END_COMMENT

* Objetivo
  + Objetivo principal es *ordenar* elementos
  + Dado un conjunto desordenado, la idea es devolverlo ordenado
  + Dada una secuencia de entrada {3,4,1} se deberia retornar una secuencia {1,3,4}
* Registros (Clave / Datos Satélites)
** Conceptos
  Están conformados por
  * Clave (key)
  * Datos Satélites

    #+name: registro
    |-------+----------------|
    | CLAVE | DATOS SATELITE |
    |-------+----------------|
** Clave
   Es el valor a ser *ordenado*
** Datos Satélites
   Es todo lo que no sea la clave
* Estabilidad
** Orden estable
  - Orden Estable => Si se mantiene el *orden relativo* original para registros con misma *clave*
  - Orden Estable => Si dos elementos con igual clave mantienen el mismo orden que al principio
** Ejemplo
  Por ejemplo si tenemos un conjunto de registros con {clave, valor}
  ~{2,A}~, {1,B}, ~{2,C}~, {5,F} <- registros {clave, valor}

  Vemos que los registros que tienen clave=2, mantienen el mismo orden que tenian al principio
  {1,B}, ~{2,A}, {2,C}~, {5,F}   <- *Orden estable*
 
  En este otro caso el orden de los registros de igual clave,
  NO mantienen el orden, aparece primero el que contiene C y luego el de A
  {1,B}, ~{2,C}, {2,A}~, {5,F}   <- *Orden NO estable*
* Métodos In Situ
** Conceptos
  - Permiten la optimización de algoritmos
** Estructura - Entradas/Salidas
   + Utilizan mismas estructuras, NO crean nuevas estructuras
     (Ej. NO crean un arreglo como estructura auxiliar, para guardar valores)
   + _Transforman la entrada_ sin una *estructura de datos auxiliar*
   + Sobreescriben la *entrada* por la *salida* durante la ejecución del algoritmo
** Memoria Extra
  - Utilizan una cantidad extra memoria (minima y constante)
  - Para el almacenamiento en *variables auxiliares* (en vez de estructuras del tipo arrays)
** Ejemplo
   #+BEGIN_SRC C
     // Secuencia de entrada es un arreglo de enteros -> int[] a
     void invertirArray(int[] a){
       // crea una estructura de datos auxiliar
       // requiere espacio en memoria (mayor que solo una variable)
       int[] aux = new int[ a.length ];

       // el orden de complejidad de este algoritmo es O(n)
       for(int c = 0; c < a.length ; c++){
         aux[c] = a[a.length - c - 1];
       }

       a = aux;
     }

     // Misma secuencia de entrada, un arreglo de enteros
     void invertirArrayInSitu(int[] a){
       // Crea una variable auxiliar
       // requiere menos espacio en memoria que una estructura de datos
       int temp;

       // reduce la cantidad de comparaciones a la mitad
       // por tanto el nivel de complejidad de este es O(n/2)
       for(int c = 0; c < a.length / 2; c++){
         temp = a[c];
         // reemplaza la "secuencia de entrada" durante la ejecución
         a[c] = a[a.length - c - 1];
         a[a.length - c - 1] = temp;
       }
     }
   #+END_SRC
* Metodo Interno/Externo
** Conceptos
   - El algoritmo a utilizar depende del método aplicado es interno ó externo
   - El tiempo de acceso a los datos también varía segun el método aplicado (interno/externo)
** Método Interno
   - Cuando el archivo a ordenar cabe en la *memoria principal*
** Método Externo
   - Cuando utilizamos dispositivos de almacenamiento como *discos duros*
   - Cuando NO utilizamos la *memoria principal*
* Complejidad (Polinómica)
** Conceptos
  - La *complejidad computacional* es que tanto la cuesta a la computadora
  - Es la complejidad de ejecutar un algoritmo
** Problemas de Decisión
   - Un *problema de decisión* es aquel que puede ser contestado con una *afirmación* ó *negación*
   - Los de *clase P* son aquellos que pueden ser resultados en tiempo de cálculo que crece de forma polinomial
   - Los de *clase NP* sólo pueden ser resueltos en *tiempo polinomial* indeterminado con una *maquina de Turing* no determinística
     (/ordenador, que puede ser un autómata/)
** Clase de Complejidad P
   - Conjunto de *problemas de decisión*
   - Pueden ser resueltos por una *máquina determinista*
   - Se pueden resolver en *tiempo polinómico*

   *Observación:*
   Algo que es *determinístico* se conoce como empieza, termina, se conoce los cambios entre transiciones.
   Es decir se conoce sus entradas, su comportamiento, y el resultado final.
** Clase de Complejidad NP (Non-Deterministic Polynomial Time)
   - Las siglas *NP* significan *tiempo polinomial NO determinista*
   - Conjunto de *problemas de decisión*
   - Pueden ser resueltos por una *máquina NO Determinista* (/Ej. una máquina de Turing no determinista/)
   - Se pueden resolver en _tiempo mayor que polinómico_

   *Observación:*
   Algo que es *NO Determinista* tiene un comportamiento indefinido, puede seguir varios caminos.
** Orden de complejidad
   - Se describe como ~O(funcion)~
   - Es una función matemática que _acota el comportamiento_ del algoritmo
     - en función del _tiempo_
     - y en función de la _cantidad de elementos_
** Evaluar la complejidad
   - Se _evalúa la cant. de comparaciones_ realizadas
   - Una comparación con un ~if~ puede ser más costosa que una *operación matemática*
     (porque puede producir un mayor número comparaciones)
   - Una *operación matemática* puede acotar la cant. de comparaciones

   #+BEGIN_QUOTE
   Si tenemos un algoritmo que contiene..
   
   ~void funcion(int[] a){ ...
   for(int i=0; c < a.length / 2; i++) ...~

   vemos que realiza ~n/2~ comparaciones, las reduce a la mitad

   por tanto su *orden de complejidad* es  ~O(n/2)~
   #+END_QUOTE
* [TODO] Métodos a analizar (Algoritmos)
** bubble sort
   - compara de a dos
   - sabe que el ultimo es el mas grande
   - tiene corte anticipado
   
   https://gfycat.com/focusedcaninehylaeosaurus
** selection sort
   - compara el primer elemento contra los n-1 restantes
   - sabe que uno es el mas chico

   https://gfycat.com/daringeasygoingboilweevil
** insertion sort
   - hace una mezcla entre el bubble y selection sort
   - tiene menos niveles de comparaciones 
     (según la cant. de elementos y su orden)

   https://gfycat.com/densebaggyibis
** shell sort
   https://www.algostructure.com/sorting/shellsort.php
** merge sort
   - divide y vencerás! no compares todos contra todos dividilo en dos y compara
   - al dividir nos queda un *arbol binario balanceado*

   https://www.algostructure.com/sorting/mergesort.php
** quick sort
   - elegimos el primer elemento como *pivote*
   - tiene un comportamiento de un *arbol*
   - separa dos conjuntos (menores/mayores) y de cada uno en otros dos subconjuntos, y asi..
   - su nivel de dificultad es mayor si el conjunto ya está ordenado
*** Variantes
**** bsort
     
**** meansort
** heap sort
   - ordenar a traves de monticulo (heap)
   - es un *arbol completo balanceado* (no debe tener agujeros/huecos)
   - se arma en orden (orden convencional de arriba abajo, de izq. a der)
   - por cada elemento que agrega debe comparar con la cant. de elementos que tenga el *piso*

   *Observacion:* un monticulo no llega a ser montaña
* Referencias
  1. https://www.matematica.uns.edu.ar/uma2016/material/curso%20UMA%202016_fbonomo_handout.pdf
  2. http://www.cs.uns.edu.ar/~prf/teaching/AyC17/downloads/Teoria/Complejidad-1x1.pdf
  3. http://exa.unne.edu.ar/informatica/programacion1/public_html/archivos/tema10_algoritmos.pdf
  4. https://www.utm.mx/~jahdezp/archivos%20estructuras/DESICION.pdf
