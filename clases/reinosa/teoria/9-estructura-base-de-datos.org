#+TITLE: Clase 09 - Estructura Base de Datos
#+STARTUP: inlineimages
* Conceptos
** DB
   Conjunto de _datos interrelacionados_, que se ajustan a un _modelo preestablecido_
** DBMS
   - Es el *Data Base Management System* (un gestor para db)
   - Gestiona los datos de la Base de Datos
   - Proporciona mecanismos para acceder a los datos
* [TODO] Propiedades - Siglas ACID
** Conceptos
   La siglas ACID nombra 4 propiedades de todo motor de base de datos que debe tener
** (A)tomicidad
   - Permite agrupar un conjunto de *instrucciones* como una *única operación*
   - Permite realizar *transacciones*
     - ejecutar varias instrucciones como única operación
     - si una instrucción falla => el resto también
** (C)onsistencia
   - Asegura la *Integridad referencial*
     (/Ej. NO crear una factura sin un cliente asociado a través de una FK/)
   - Asegura la *Integridad de la información*
     - Si alguna *instrucción* falla => el modelo se mantiene
     - si en una *transacción*, una *instrucción* falla => se vuelve a su *estado anterior* (/no modifica por la mitad/)
     - Cualquier *transacción* lleva a la DB de un *estado seguro* a otro *estado seguro*
** (I)solation - Aislamiento - Concurrencia
   - Aisla las instrucciones que operan sobre la misma información para evitar errores
   - Asegura que cada transaccion es independiente
   - Asegura que una operación NO pueda afectar a otras
   - Permite que el motor sea *concurrente*
** (D)urabilidad
   - Permite *persistir/guardar* el resultado de una operación
     (/apesar de que el sistema luego falle, esta información persiste en la DB/)
   - Permite *recuperar/leer* el resultado de aquellas operaciones
* Arquitectura de Software en Capas
  - La arquitectura de un software está formado en capas/niveles
  - Los tipos son
    - Monocapas
    - Bicapas
    - Multicapas: está basada en que cada capa cumple una función
  - Los *motores de base de datos* usan 3 capas
    1. _Capa de Presentación_: (/nivel más alto de la aplicación, la que utilizan los usuarios, Ej. en web es el frontend/)
    2. _Capa Conceptual/Logica/Dominio_: (/es el modelo lógico, tiene las reglas de dominio sobre "que se puede hacer, y que no"/)
    3. _Capa de Persistencia/Datos_: (/acceso a los datos/)

  #+BEGIN_QUOTE
  Llevado a la realidad, cuando realizabamos programas en *lenguaje C*, *Wollok*, ... 
  estabamos implementando una *Arquitectura Monocapa*,
  
  porque en el mismo programa estaban todas las capas juntas "presentación/lógica/persistencia"

  los datos los guardabamos en vectores, colecciones, ...
  la lógica de que se debía hacer o no, estaba en el mismo lugar
  #+END_QUOTE

  #+BEGIN_QUOTE
  Por lo general se tiende hacer sistemas con una *arquitectura bicapa* ó de 3 capas, ó más de 3 capas...
  Un ejemplo sería si tuvieramos
  1. Capa de presentación: el frontend con html
  2. Capa de dominio: en php
  2. Capa de persistencia: una base de datos mysql

  Otro ejemplo sería
  1. Capa de presentación+Capa de dominio: en java
  2. Capa de persistencia: una base de datos sql
  #+END_QUOTE

  *Observaciones:*
  - El usuario está encima de la *capa de presentación*, por tanto sólo ve esta capa (/la de presentación/)
  - El Sistema Operativo, está por debajo de la *capa de persistencia*
* Arquitectura ANSI de un DBMS
** Conceptos
   - Las siglas *ANSI* significan *American National Standards Institute* 
     (/son reglas estándar y aprobadas que cumple para ser un DBMS/)
   - Se compone por 3 capas/niveles
** Objetivos
*** Vistas Independientes de los datos
    - Los usuarios tienen vistas independientes de los datos
    - Una vista no debería afectar a otra vista
      (/Ej. si un admin modifica la vista de almacenamiento => no deberia afectar la vista de usuario/)
*** Ocultar detalles fisicos de almacenamiento
    Evita que *usuarios* lidien con problemas de almacenamiento
** [WAITING] Niveles/Capas de un DBMS
*** Vista desde el Almacenamiento
**** Nivel Externo - Capa de Presentación (Vistas de los usuarios)
     - _Restringir acceso a datos_ que no tiene autorizado el usuario
     - Muestra solo los datos que necesita el usuario
**** Nivel Conceptual (Vista diseño)
     - Podria parecerse a un (DER) a nivel lógico
     - Describe los datos que se almacenan
     - Muestra como están relacionados los datos
**** Nivel interno - Capa de Persistencia (Vista de almacenamiento)
     - Determina como va a *persistir/guardar* la información
     - Tiene en cuenta las propiedades de la siglas *ACID*
     - Es la *representación física* de la base de datos
     - Describen como se almacenan los datos en la db y en el equipo (a nivel hardware)
*** Vista desde la Funcionalidad
**** Nivel Externo - Capa de Presentación
     - El usuario interactúa en este nivel (/Tanto un usuario final como una aplicación PL-SQL/)
     - Es el (SSMS) SQL Server Management Studio (/gestor de base de datos/)
     - Es cualquier programa que interactúe con la DB
     
     *Observaciones:*
     - ~PL-SQL~ y ~T-SQL~ son lenguajes procedurales propietarios, agregan caraterísticas a ~SQL~
     - ~T-SQL~ (Transact SQL) es utilizado por *Microsoft* adiciona nuevas caraterísticas a ~SQL~
     - ~PL-SQL~ es utilizado por *Oracle* y permite crear aplicaciones
**** Nivel Conceptual
     - Maneja la lógica de la DB (que se puede o no hacer)
     - Un desarrollador y un DBA trabaja en este nivel
       - El desarollador realiza *modelos lógicos* para desarrollar aplicaciones
       - El DBA realiza elije mejor modelo desde el punto de vista del DBMS
     - Tiene un *analizador sintático* (parser) y un *analizador semántico* (scanner)

     *Observación:*
     - El desarrollador sólo utiliza las capas superiores, NO necesita conocer la implementación del sistema
**** Nivel interno - Capa de Persistencia
     - Se maneja la *persistencia* de la información en el DBMS
     - El DBA decide se guardarán los datos
     - El DBA decide que se puede hacer o no
       (/a nivel de programación según la configuración del DBMS/)
*** Diagrama conceptual
    #+BEGIN_SRC plantuml :file img/capas-dbms.png :exports results
      @startuml
      'skinparam defaultTextAlignment center
      title Capas de un DBMS

      [Nivel Externo] <-> [Nivel Conceptual]

      [Nivel Conceptual] <-> [Nivel Interno]

      rectangle "Vista desde el Almacenamiento"{
          note bottom of [Nivel Externo]
          ,* Restringir acceso a datos
          end note

          note bottom of [Nivel Conceptual]
          ,* Como se almacenan los datos
          ,* Como se relacionan los datos
          end note

          note bottom of [Nivel Interno]
          ,* Representación física de la db
          ,* Se aplican las siglas **ACID**
          end note
      }

      rectangle "Vista desde la Funcionalidad"{
          note top of [Nivel Externo]
          ,* Interacción con el usuario
          ,* SQL Server Managment Studio
          end note

          note top of [Nivel Conceptual]
          ,* Logica de la DB, que se puede hacer o no
          ,* Analizador Sintáctico y Semántico
          end note

          note top of [Nivel Interno]
          ,* Manejar como persistir los datos
          ,* El DBA decide según la config del DBMS
          end note
      }
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/capas-dbms.png]]
*** [WAITING] Ejemplo - Capas DBMS
    Supongamos que queremos hacer ~SELECT * FROM clientes WHERE id_cliente=101~ el motor hará lo sig.:

    1. Lo recibe la *capa externa* (el sql server managment studio)
    2. Lo recibe la *capa de usuario* (para revisar los roles, permisos, etc..)
    3. Se lo pasa a la *capa lógica/conceptual*
       1. analiza la *sintáxis* (/chequea que la sintáxis de la instrucción SQL esté OK/)
       2. analiza la *semántica* (/chequea que exista la tabla clientes, que exista el campo id_cliente en esa tabla, si id_cliente es integer,../)
    4. busca los datos en la *FAT* (/la FAT actúa como índice de páginas, así como el footer offset actúa como índice de los renglones de página/)
       - chequea en que número de *página* están los datos (supongamos que devuelve la página N)
    5. El *file manager* se comunica con el *disk manager* y le pide de la información de la ~página N~ y ~posición X~
    6. Luego *disk manager* busca la información en la ~página N~, ~posición X~

    #+BEGIN_QUOTE
    La *FAT* significa *File Allocation Table* que quiere decir *tabla de asignación de archivos* que aparece al principio
    del volumen que se haya formateado como *FAT* (/en esta segunda mención nos referimos al filesystem, el sistema de archivos/)
    #+END_QUOTE
* Componentes de un DBMS
** IPL
   - Las siglas son de *Initial Program Loader*
   - Programa que _levanta el servicio_ del DBMS
   - *Carga las estructuras de la DB* en MP, Caché y Disco
** User Manager
   - *Gestiona la seguridad* (vertical y horizontal) del DBMS
   - Administra los perfiles/usuarios/roles de acceso

   #+BEGIN_QUOTE
   La *seguridad vertical* es poder ver o no las tablas
   mientras que la *seguridad horizontal* es poder crear o no esquemas
   #+END_QUOTE
** File Manager
   - Permite la creación/eliminación/acceso a los archivos  (el ~.bak~)
   - Gestiona la lógica de almacenamiento de los archivos del DBMS
   - Se encarga de acceder a los archivos/información del motor
   - Se encarga de acceder a la ~FAT~ que refiere a *File Allocation Table* 
     (/El motor tiene su propia FAT, al igual que un SO/)
   - Una DB es un SO pero sin el manejo de periféricos (dispositivos de E/S)
     (/Ej. no imprime en pantalla, no usa el disco, .../)
** Disk Manager
   - *Gestiona el espacio físico* del DBMS (/los archivos lógicos del File Manager/)
   - Se comunica con el SO para el acceso a disco
   - El motor gestiona/administra su propio disco (Ej. sería el archivo ~.bak~ que representa la DB)
** Ejemplo de comunicación entre los Componentes de un DBMS
   Cuando creamos una tabla...
   1. el motor le pide al SO un espacio en disco, éste le responde con la posición en disco
   2. el *Disk manager* gestiona el espacio y le comunica al *file manager*
   3. el *file manager* se encarga de crear la db (el ~.bak~)
* Técnicas de administración de memoria
** Conceptos
   - Esto es a *Nivel Interno Almacenamiento*
   - Existen dos técnicas para la administración de MP

   #+BEGIN_COMMENT
   <<DUDA 1>> Se refiere a la vista de almacenamiento del nivel interno?
   #+END_COMMENT
** Segmentación
   - Divide la memoria en segmentos
   - Cada segmento es *longitud/tamaño variable*
** Paginación
*** Conceptos
    - Divide la memoria en paginas
    - Las páginas son todas de *igual longitud/tamaño* (longitud fija y misma longitud)
    - Las páginas NO se pueden *fragmentar* (/porque todas las páginas tienen un tamaño fijo/)
*** Página (estructura)
**** Componentes
     Una página tiene 3 componentes
     1. id page
     2. body page
     3. footer offset

     #+BEGIN_SRC plantuml :file img/paginacion.png :exports results
       @startuml
       'skinparam defaultTextAlignment center
       title Paginación

       note as N1
       ,**Id Pagina**
       | 9 |

       ,**Body**
       (renglones)
       | 123 Carlos... |
       | 123 Perez... |
       | 123 Samuel... |

       ,**Footer offset**
       (posiciones relativas)
       | 0 | 1 | 2 |
       end note

       note as N2
       Filas a guardar en páginas
       |= Pos |= Id |= Nombre |
       | 0    | 123 | Carlos  |
       | 1    | 123 | Perez   |
       | 2    | 123 | Samuel  |
       end note


       @enduml
     #+END_SRC

     #+RESULTS:
     [[file:img/paginacion.png]]
**** ID
     - identifica las páginas (que están numeradas y son contiguas)
**** Body
    - está dividido en *renglones* (/representan registros/)
    - acá _se almacenan los datos_ (/en cada renglón/)
**** Footer offset (pie de página)
    - Tiene _tantas entradas como renglones/registros_ tenga la página
    - Actúa como un índice pero de cada página
    - Lleva directamente al renglón (/como un acceso directo/)
    - se _registra la posicion relativa de la fila_ (relativo al inicio)
      (/Ej. la 2da posición es distante a la primera, por eso es relativa/)

    #+BEGIN_QUOTE
    Así como el *pie de página* actúa como el *índice de los renglones* dentro de la página,
    la *FAT* actúa como *índice de las páginas*
    #+END_QUOTE
** Fragmentación
*** Conceptos
    - Un archivo fragmentado está separado en varios fragmentos (/pueden estar esparcidos en varias partes del disco/)
    - Se utiliza el concepto de *página* para evitar la *fragmentación* porque esta NO puede estar fragmentada por ser de tamaño fijo

    - Si una *página* es más grande que un *cluster* => la página va a estar *fragmentada* (en más de 1 cluster)
    - si la *pagina* está *fragmentada* => va a estar en más de 1 cluster => se va la a tener que leer 2 veces (porque el SO lee en tamaño de *cluster*)
    - NO hay fragmentación <=>  el tamaño de página = el tamaño de cluster (/esto sólo sucede en los mainframes/)

    #+BEGIN_QUOTE
    En Windows cuando se utiliza el desfragmentador, éste une los fragmentos de un archivo
    que están dispersos en distintas partes del disco, y repite lo mismo para el resto de los archivos.
    Por eso luego lee más rápido el archivo
    #+END_QUOTE

    #+BEGIN_COMMENT
    <<DUDA>>: en un momento dice que una página NO puede estar fragmentada, y luego que si (?)
    #+END_COMMENT

    *Observación:*
    - El SO lee en tamaño de *cluster* (/porque es la menor unidad de medida lectura/escritura en disco/)
*** Fragmentación externa
    - Cuando se asigna espacio al disco y al grabar quedan huecos, osea un sobrante de ~Bytes~
    - Cuando se define un _tamaño de página_ menor al _tamaño del cluster_ (/no se está utilizando todo el cluster/)
      
    *Observaciones:*
    - El *cluster* es la _menor unidad de medida de información_ para lectura/escritura en *Disco*
*** Fragmentación interna
    - se da por la distancia entre los *clusters* (/huecos, sobrante de bytes/)
    - Hay *fragmentación interna* => Cuando se trata de grabar algo más chico que un *cluster*
      (/al grabar algo más chico, al cluster le queda espacio sobrante/disponible/)
    - Hay *fragmentación interna* => Cuando se tata de grabar algo más grande que la página
      (/se graba una parte de la página en un cluster, y lo que falta en otro cluster, éste último le queda espacio sobrante/)
    - Cuando la _longitud de la fila_ es menor que la _longitud del renglón_
      (/porque ocupa tan poco espacio, que queda espacio sin ocupar/)

    #+BEGIN_COMMENT
    <<DUDA>>: NO es que cuando la página no tiene más renglones, el motor pide una nueva página?
    #+END_COMMENT

    #+BEGIN_QUOTE
    El contenido de las *filas* se guarda en los *renglones* del *cuerpo* de las *páginas*.
    
    NO se puede evitar la fragmentación interna porque uno puede definir un tamaño de fila en una tabla
    y el motor puede tener definido un tamaño mayor de página, y la página queda con espacio sobrante
    #+END_QUOTE

    *Observación:*
    - Si el *cluster* es muy grande => habrá *fragmentación interna*
      (Ej. si en el cluster escribimos "carlos" veremos lo sig. ~CARLOSXXXX~ donde cada ~X~ es espacio libre)

    #+BEGIN_SRC plantuml :file img/paginacion-fragmentacion-interna.png :exports results
      @startuml
      'skinparam defaultTextAlignment center
      title Paginación - Fragmentación interna

      note as N1
      ,**Id Pagina**
      | 9 |

      ,**Body**
      (renglones)
      | 123 Carlos XXXXXXXXXXXX |
      | 123 Perez  XXXXXXXXXXXX |
      | 123 Samuel XXXXXXXXXXX |

      ,**Footer offset**
      (posiciones relativas)
      | 0 | 1 | 2 |
      end note

      note as N2
      Filas a guardar en páginas
      |= Pos |= Id |= Nombre |
      | 0    | 123 | Carlos  |
      | 1    | 123 | Perez   |
      | 2    | 123 | Samuel  |
      end note

      note as N3 #lightgreen
      ,**Fragmentación interna**
      Cuando el __tamaño de las filas__ es menor
      que la __longitud de los renglones__ 
      de la página.

      Los renglones de página tienen espacio
      de sobra/disponible que no se está usando
      end note


      N3 .up. N1
      N3 .up. N2
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/paginacion-fragmentacion-interna.png]]
*** Otro problema
    - Si el _tamaño de la fila es mayor_ que la _longitud de renglon_ => cada fila usará 2 o más renglones

    #+BEGIN_SRC plantuml :file img/paginacion-problema.png :exports results
      @startuml
      'skinparam defaultTextAlignment center
      title Paginación - Problema

      note as N1
      ,**Id Pagina**
      | 9 |

      ,**Body**
      (renglones)
      | 123 Carlos  |
      | Gimenez de las Flores... |
      | 123 Perez   |
      | Gimenez de las Ostias... |
      | 123 Samuel |
      | Fernandez de las algo... |

      ,**Footer offset**
      (posiciones relativas)
      | 0 | 0 | 1 | 1 | 2 | 2 |
      end note

      note as N2
      Filas a guardar en páginas
      |= Pos |= Id |= Nombre |= Apellido |
      | 0    | 123 | Carlos  | Gimenez de las Flores |
      | 1    | 123 | Perez   | Gimenez de las Ostias |
      | 2    | 123 | Samuel  | Fernandez de las algo |
      end note

      note as N3 #lightgreen
      ,**Problema**
      Cuando el __tamaño de la fila es mayor__ que la
      __longitud de renglon__ ...

      Entonces cada fila ocupará dos  o más renglones
      end note


      N3 .up. N1
      N3 .up. N2
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:img/paginacion-problema.png]]
* Formas de Almacenar información
** Conceptos
   Hay dos maneras de almacenar la información
   - De forma física
   - De forma lógica
** Almacenamiento Fisico
   Con las técnicas de
   1. Segmentar
   2. Paginar
** Almacenamiento Lógico
   Con la técnica de Clustering con
   1. Intra file
   2. Inter file
* [TODO] Clustering
** Conceptos
   - Su traducción es un "conjunto" de algo
   - Es una _técnica de agrupamiento_ que _unifica objetos_ en función algún criterio
   - A nivel de redes, un cluster seria un conjunto de servidores que actúan como un solo servidor
   - Un DBMS (motor) usa las dos técnicas de clustering (/para almacenar cosas distintas/)
     - _Intra file_: prioriza pertenencia
     - _Inter file_: prioriza relación/contenido

   #+BEGIN_COMMENT
   <<DUDA>> Las PK de un archivo (intra file), están en otro archivo (en una página, osea intra file)
   <<DUDA>> La PK de una tabla es otro archivo (en el arbol-b, porque en todos los nodos-hoja tiene las *claves*)
   #+END_COMMENT
** Intra file
   - *Intra* significa "dentro de"
   - Almacena cada *tabla* en una *página* diferente (/para no mezclar las filas/)
   - _Prioriza la pertenencia_ a un conjunto/de un archivo
     (/Ej. solo guardar los clientes, ó solo los productos, pero por separado/)
   - Almacena sólo las *tablas* en páginas (/no necesita guardar los índices/)

   #+BEGIN_EXAMPLE
   Si una tabla contiene datos de clientes, se crean páginas sólo para esa información,
   porque administra las páginas "intra fila".

   Por más que quede una página con espacio sobrante, 
   osea que quedó a medias y no se completó con todos los clientes
   #+END_EXAMPLE

   #+BEGIN_SRC sql
     -- En esta query el motor va a priorizar la "pertenencia" del conjunto
     -- solo me va a traer los elementos de la tabla "clientes"
     SELECT * FROM clientes
   #+END_SRC
** Inter file
   - *Inter* significa "entre"
   - _Prioriza la relación/contenido_ entre objetos (/por más que pertenezcan a conjuntos diferentes/)
   - Almacena los *índices* y las *PK* asociadas a las *FK*

   #+BEGIN_SRC sql
     -- En esta query el motor va a priorizar el 'contenido'
     -- por más que el mismo esté en distintos conjuntos (clientes, facturas, renglon_factura, ...)
     SELECT * FROM clientes c
                     JOIN facturas f ON f.id_cliente = c.id_cliente
                     JOIN renglon_factura r ON r.numero_factura = f.numero_factura;
   #+END_SRC
** [WAITING] Ejemplo Inter File - Arbol-b
   Supongamos que tenemos las tablas: alumnos, materias

   El *inter file* va a contener un *árbol-b* con la *claves* y *posiciones relativas*
   de las tablas anteriores, y le adiciona a la estructura del árbol-b un puntero extra (una ~FK~) que apunta
   a una *tabla de hashing* que tiene todas las relaciones de ese alumno (ej. materias_x_alumnos)

   Los índices se guardan *inter file* porque
   1. en una página se guarda la ~PK~ y todas las ~FK~ que tenga relacionada esa ~PK~
   2. guarda el *árbol-b*
   3. guarda *tablas de hashing* duplicando la información
      - _la información se duplica_ porque por c/nodo del árbol-b se guarda una *tabla de hashing* con
        todas las _posiciones relativas_ de todas las FK que tenga relacionada
      - esas *tablas de hashing* evitan las *busquedas secuenciales* (permite *acceso directo*)
   4. luego de buscar/encontrar en el *árbol-b* un elemento por su clave
      - usa el *puntero* (la ~FK~) para pedirle al *disk manager* que traiga de que *página* (a la que apunta la FK)
        tomar la *posición relativa* del nodo encontrado antes   
* Almacenamiento y Tipos de archivos
** Archivos
   #+BEGIN_QUOTE
   el único _formato de archivo_ existente y manejable por un SO
   está formado por un _conjunto de caracteres ASCII_
   #+END_QUOTE
** Header
   - Es un _conjunto de caracteres_ que se agrega al inicio del archivo (/para saber como se debe leer/)
   - Define el contenido del archivo
   - Es la estructuración del archivo y del tipo de archivo
   - El motor de una DB necesita un *header* para cada *tabla*
     - para saber _cuantas columnas_ tiene
     - para saber _que tipos de datos_ son cada columna
** Extensión
   - Dice que tipo de *header* tiene (/para que el motor ó programa sepa como leer el archivo/)
   - de la misma manera se comporta un motor de DB

   Algunos ejemplos son

   |----------------------+------------------+----------|
   | Extensión de Archivo | Cabecera         | en ASCII |
   |----------------------+------------------+----------|
   | .zip                 | 50 4B 03 04      | PK       |
   | .rar                 | 52 61 72 21      | Rar!     |
   | .pdf                 | 25 50 44 46      | %PDF     |
   | .jpeg                | FF D8 FF E0 / FE | JFIF     |
   |----------------------+------------------+----------|
** Header de tablas
   El motor va a guardar 
   - Cuantas tablas, filas, columnas
   - Necesita saber el *tamaño de la fila* para hacer el ~fread~
     (/para saber cuanto debe leer/)
   - _Una cabecera debe ser de tamaño fijo_ para que sepa como leerla
     (Ej. Al tener ~char nombre[256]~ el ~for~ que itere, solo leerá hasta 256 caracteres)
   - El _tamaño de una fila es cuanto ocupa todos los campos/columnas_
     (/Ej. cada fila de un resultado de una consulta sql, está formada por varias columnas,
      los campos que definimos al crear la tabla/)

   #+BEGIN_SRC c
     // El DBMS crea un header para identificar las tablas
     // de la sig. manera

     struct table{
       long filas;
       long columnas;
       int tamaño_fila; // será la suma de las columnas de las filas
     };

     struct columna{
       char nombre[256];
       char tipo;
       int longitud;
       int decimales;
     };
   #+END_SRC
* Referencias Web
  1. https://docs.oracle.com/database/121/CNCPT/tablecls.htm#CNCPT609
  2. https://shafiq2410.wordpress.com/2012/04/22/what-do-you-mean-by-cluster-in-oracle/
