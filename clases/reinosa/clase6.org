#+TITLE: Clase 06 - Compresión
#+STARTUP: inlineimages
* Algoritmos de compresión
** Conceptos
   Existen dos tipos de _algoritmos para comprimir archivos_
   - Sin pérdida -> son reversibles
   - Con pérdida -> NO son reversibles

   #+BEGIN_QUOTE
   Se utiliza el árbol binario porque mantiene el orden y permite
   manejar valores binarios, que es lo que entiende/lee la máquina.
   #+END_QUOTE
** Con pérdida (multimedia)
   - Se _pierde información al comprimir_, y _NO se puede recuperar_ (/NO son reversibles/)
   - NO son *reversibles* (/por NO poder recuperar parte de la información/)
   - Cuando la única forma de comprimir/achicar, es perder algo de información
     (/Ej. es común con archivos multimedia, con el audio/video con la codificación y recodificación/)
** Sin pérdida
   - Son *reversibles* (/permiten volver al estado original del archivo/)
   - Ej. cuando usamos programas como winzip,winrar, no tiene perdida de informacion
* Alfabeto ASCII
  - En el alfabeto *ASCII* cada caracter ocupa ~1 byte~ osea ~8 bits~
  - Cada caracter tiene una longitud fija (/longitud=1/)
  - Si un caracter se repite varias veces, su longitud no variará seguirá siendo 1
  - Si un archivo no utiliza los ~256 caracteres~ => se despediciarán bits
    (/es lo que comunmente sucede, ningún archivo utiliza los 256 caracteres/)

  #+BEGIN_QUOTE
  El alfabeto ASCII es la representación de nuestro alfabeto a un lenguaje nivel máquina, osea al binario
  que es el único lenguaje que ésta entiende y utiliza.
  
  Donde cada caracter (a,b,1,3,?,!,-, ...) está representado por un valor binario
  donde el ~0~ equivale al ~110000~, el ~1~ el ~110001~, la ~'a'~ el ~1100001~, ...
  #+END_QUOTE
* Algoritmo de Huffman
** Conceptos
  - es un _algoritmo de compresión sin pérdida_
  - identifica cada caracter de los archivos a comprimir, y evalúa su repetición
  - crea una tabla de *frecuencia* (un vector) para saber cuantas veces se repite c/caracter
  - Los caracteres del nuevo alfabeto que se genera
    - tienen una longitud variable (según su repetición)
    - a mayor longitud => menor es su representación
  - en la tabla/vector se le asigna un código de longitud variable
    (/es variable porque crece o no según el número de repeticiones/)

  *Obsevaciones:*
  - Se _recodifica el archivo_ cambiando su representación, codificandolo a _un nuevo alfabeto diferente al ASCII_
  - _Se codifica en función a la repetición de los caracteres_
  - Cada caracter va a tener una longitud variable (/mayor es su repetición => menor es su representación en bits/)
   
  #+BEGIN_QUOTE
  Al principio no se alcanzaba a cubrir los 8 bits (1 byte)
  por tanto se agregaron caracteres de extras como caritas, ...
  quedando un alfabeto *redundante* (/tiene caracteres innecesarios/)
  para llegar a una potencia de 2 osea ~2^3~ (8bits)

  Los caracteres se pueden codificar mediante ASCII ó Unicode,
  se utiliza un tamaño fijo para ambos, 1 Bytes para ASCII
  y 4 Bytes para Unicode
  #+END_QUOTE
** Proceso de Compresión
*** 1. Construcción de la Tabla de Frecuencia
    - Se crea el vector de la *tabla de frecuencia* y _se ordenan los caracteres por repetición de forma descendente_ 
    - El criterio de ordenar de forma descendente (/de mayor a menor/) de izq. a der. es según la cant. de veces que se repiten los caracteres
    - se da prioridad a los que más se repitan

    El siguiente vector es la *tabla de frecuencia* donde los caracteres están ordenados descendentemente por cant. de repetición

    #+NAME: vector-tabla-de-frecuencia
    |---+---+---+---+---|
    | N | E | U |   | Q |
    |---+---+---+---+---|
    | 3 | 3 | 2 | 1 | 1 |
    |---+---+---+---+---|
*** 2. Construcción de la abstracción del Arbol binario (desbalanceado)
      1. Se lee el archivo nuevamente usando el vector de la *tabla de frecuencia* generada
      2. Se genera la abstracción de un *árbol binario* (desbalanceado) dividiendo el vector en dos, en función de la *cant. de repeticiones*
         - _La raíz_: es el vector completo (Ej. ~NEU Q~)
         - _Las ramas_: están formadas por más de un caracter, _agrupa pares de caracteres por repetición_ (/según que tanto se repetían/)
         - _Las hojas_: representan _un solo caracter_
      3. Cada nodo rama se vuelve a dividir en 2 hasta tener solo *nodos hojas*
      4. Por cada caracter se genera un *código de bits* que lo representará
      5. Finalizado el árbol binario, éste será la representación computacional del archivo comprimido
         (/donde lo único que se hizo fue cambiar la codificación a binario, lenguaje que entiende la máquina/)

      #+BEGIN_QUOTE
      Más *desbalanceado* está el árbol => mayor es la *compresión* del archivo
      porque habrán caracteres que van a tener mayor repetición
      (siendo esos caracteres que más se repiten del nuevo alfabeto generando, los que menor representación tengan en ~bits~,
      y aquellos que menos se repitan mayor será su representación en ~bits~)
      #+END_QUOTE

      *Observaciones:*
      - El binario resultante se completa con ~0~ ó ~1~ para llegar al tamaño de *byte*
      - Por convención la lectura del árbol a izq. se representa con ~0~ y a der. con ~1~
      - Se usa un *árbol binario* porque es más rápido para recorrer/leer que un vector
      - El *árbol* es solo una *abstracción* porque NO se guarda físicamente, es sólo para representar la codificación en binario
*** Comprimir Archivos Pequeños y Tamaño del Vector Tabla de Frecuencia
    Para archivos pequeños NO se realiza compresión porque la *tabla de frecuencia* (el vector) tiende pesar más que el archivo original

    Si tenemos un archivo que contiene el texto ~EN NEUQUEN~ tenemos
    - 1 Byte por cada caracter (por ser de tipo ~char~)
    - el tamaño de *la cadena* es ~10 * 1 Byte = 10 Bytes~

    En la *tabla de frecuencia* que está representada por un vector, que se guarda físicamente en el archivo comprimido, tenemos
    - 1 Byte por cada caracter (por ser de tipo ~char~)
    - 4 Bytes de cada cant. de repetición de cada caracter (/suponiendo que es de tipo ~long~./)
    - el tamaño del vector es ~5 * 1Byte + (3+3+2+1+1) * 4 Bytes = 45 Bytes~

    Observamos como al intentar comprimir un archivo muy pequeño, la *tabla de frecuencia* (el vector) pesa más que 
    *la cadena* de texto a comprimir. Por esa razón el programa para comprimir, NO lo comprimirá.

    Dejamos de referencia la *tabla de frecuencia* del texto ~EN NEQUEN~

    #+NAME: vector-tabla-de-frecuencia
    |---+---+---+---+---|
    | N | E | U |   | Q |
    |---+---+---+---+---|
    | 3 | 3 | 2 | 1 | 1 |
    |---+---+---+---+---|
** Ejemplos de Compresión
*** Ejemplo 1 - Caso hipotético
    Partamos que en realidad este archivo quizás NO lo comprimirá (por tener poco texto), es solo a modo de ejemplo

    Si tenemos un archivo que contiene la palabra ~EN NEUQUEN~ y queremos comprimirlo
    1. Se crea la *tabla de frecuencia* en este caso es ~ENU Q~ junto con las repeticiones de c/caracter
       - se lee el archivo por primera vez
       - la tabla de frecuencia está representada por *vector*
       - donde la ~E~ el primer elemento, por ser el que más se repite,
       - seguido de la ~E~ la ~N~, y asi.. en forma descendente
       - el espacio y los saltos de linea también cuentan como caracter, xq forman parte del alfabeto ASCII
    2. Luego se arma el *árbol binario* desbalanceado (/el árbol es sólo una abstracción, éste nunca se guarda/)
       - se lee el archivo por segunda vez para usar de referencia la *tabla de frecuencia*
       - el árbol debe estar *desbalanceado* porque puede haber caracteres que se repiten más que otros
       - el árbol generado es la representación computacional (/se recodifica a binario/)
       - el binario generado se completa con ~0~ y/o ~1~ para llegar al tamaño de ~Byte~ osea tener múltiplos de ~8 bits~
         (/porque cada caracter ASCII es del tipo ~char~ y el tamaño de esté es ~8 bits~./)

    Finalmente tenemos
    1. La representación computacional de ~EN NEQUEN~ en binario ~00:01:110:01:00:10:111:10:00:01~ 
       este binario representa el _nuevo alfabeto_, se _recodificó_ el texto original a *binario*
    2. Agregamos al final ~2 bits~ para llegar a los ~8 bits~ (1 Byte) y nos queda ~[00011100][10010111][10000100]~
    3. Si sumamos el tamaño de cada caracter  ~8 bits + 8 bits + 8 bits = 24 bits~ (3*1 Byte = 3 Bytes)
       el archivo comprimido pesaría aprox. ~3 Bytes~ (24 bits) sin tener en cuenta el header,crc, ...

    Vemos como el texto "EN NEUQUEN" que tenía 10 caracteres se _recodificó_ en otro nuevo
    que contiene 3 caracteres, y que en binario es ~[00011100][10010111][10000100]~ (/separamos con corchetes para diferenciar/)
    
    *Observaciones:*
    - Al comprimir el archivo se lee veces el archivo (dos accesos a disco)
    - la primera lectura para generar la *tabla de frecuencia*
    - la segunda lectura para generar el *árbol* (para su recodificacion a binario)
    - en el barrido del árbol recordamos que
      - el ~0~ indica una lectura a izquierda
      - el ~1~ indica una lectura a derecha

    Separamos como sería la lectura del árbol al *descomprimir* (/recordando que el árbol es solo una abstracción, y no se guarda en el archivo/)

    #+NAME: representacion-computacional
    |--------------------+----+----+-----+----+----+----+-----+----+----+----|
    | Posicion (en bits) | 00 | 01 | 110 | 01 | 00 | 10 | 111 | 10 | 00 | 01 |
    |--------------------+----+----+-----+----+----+----+-----+----+----+----|
    | caracter leido     |  E |  N |     |  N |  E |  U |   Q |  U |  E |  N |
    |--------------------+----+----+-----+----+----+----+-----+----+----+----|

    El siguiente vector es la *tabla de frecuencia* donde los caracteres están ordenados descendentemente por cant. de repetición

    #+NAME: vector-tabla-de-frecuencia
    |---+---+---+---+---|
    | N | E | U |   | Q |
    |---+---+---+---+---|
    | 3 | 3 | 2 | 1 | 1 |
    |---+---+---+---+---|
*** Ejemplo 2 - Basado en el ejemplo (1)
    Probamos el mismo texto del ejemplo anterior en un generador online con el *algoritmo de huffman*,
    donde la única diferencia es que el *subárbol derecho* contiene los caracteres ~e~ y ~n~ 
    en vez del *subarbol izquierdo*. Por eso veremos que el binario empieza con ~10 11~ en vez de ~00 01~

    Considerando lo anterior, el *binario* que representa el archivo comprimido es ~1011010111000011001011~
    y la *tabla de frecuencia* es la siguiente
    
    #+name:tabla-de-frecuencia
    |----------+------------+---------|
    | Caracter | Frecuencia | Binario |
    |----------+------------+---------|
    | e        |          3 |      10 |
    | n        |          3 |      11 |
    | u        |          2 |      00 |
    | space    |          1 |     010 |
    | q        |          1 |     011 |
    |----------+------------+---------|

    Por último el *árbol binario* (desbalanceado) teniendo en cuenta lo dicho anteriormente de los subarboles, sería

    [[./img/huffman-arbol.png]]
*** Ejemplo 3 - Comprimir archivo pequeño Con Zip en Linux
    Supongamos que tenemos un archivo ~notas.txt~ que contiene el texto ~lala lala lala~ 
    repetido 10 veces tenemos ~(15Bytes) * 10 = 150 Bytes~ 
    Si tratamos de comprimir sucederá lo siguiente en la terminal

    #+BEGIN_SRC sh
      # preguntamos cuantos bytes pesa el archivo original sin comprimir
      $ du --bytes notas.txt
      150     notas.txt

      # hacemos una compresión estandar (al indicar parámetro el -6)
      # nos dice que del archivo original se removió un 91% de contenido redundante
      $ zip -6 archivo.zip notas.txt
      adding: notas.txt (deflated 91%)

      # preguntamos cuantos bytes pesa el archivo comprimido
      # Archivo original: 150 Bytes
      # Archivo comprimido: 180 Bytes
      #
      # El comprimido pesa más porque el archivo original es muy chico
      # y dentro de este también se guarda el vector que representa la "tabla de frecuencia"
      $ du --bytes archivo.zip
      180     archivo.zip
    #+END_SRC
*** Ejemplo 4 - Comprimir archivo mediano Con Zip en Linux
    Supongamos que tenemos un archivo ~notas.txt~ que tiene el texto ~lala lala lala lala lala lala~ 
    repetido 20 veces tenemos ~(30 Bytes) * 20 = 600 Bytes~  (/los saltos de línea y los espacios también cuentan/)
    Si tratamos de comprimir sucederá lo siguiente en la terminal

    #+BEGIN_SRC sh
      # preguntamos cuantos bytes pesa el archivo original sin comprimir
      $ du --bytes notas.txt
      600     notas.txt

      # hacemos una compresión estandar (al indicar parámetro el -6)
      # nos dice que del archivo original se removió un 97% de contenido redundante
      $ zip -6 archivo.zip notas.txt
      adding: notas.txt (deflated 97%)

      # preguntamos cuantos bytes pesa el archivo comprimido
      # Archivo original: 600 Bytes
      # Archivo comprimido: 185 Bytes
      $ du --bytes archivo.zip
      185     archivo.zip

      # si queremos conocer el tamaño real al que se comprimió,
      # sin el header,crc, etc..  que también ocupa espacio usamos 'unzip -v archivo.zip'
      #
      # 1. menciona que el archivo tenía una longitud de 600 caracteres
      # 2. el método que usó para comprimir
      # 3. el tamaño real (en este caso 19 Bytes)
      # 4. que % del contenido redundante se removió del archivo original
      $ unzip -v archivo.zip
      Archive:  archivo.zip
      Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
      --------  ------  ------- ---- ---------- ----- --------  ----
      600  Defl:N       19  97% 2021-08-11 19:05 af4c6b66  notas.txt
      --------          -------  ---                            -------
      600               19  97%                            1 file
    #+END_SRC
** Proceso de Descompresión
   + Se lee del archivo el *binario* que contiene usando de referencia la *tabla de frecuencia* que es un vector
     (/la lectura se realiza como el barrido de un árbol binario/)
   + Para saber cuando finalizar la lectura del archivo usa de la *tabla de frecuencia* la cant. de repeticiones de cada caracter (/para saber cuantos debe leer/)
     - caso contrario leería caracteres de más (/porque al comprimir se agregaban bits para redondear a 8 bits/)
     - al comprimir se completaba el vector para tener mútiplos de 8 ya que ~1 Byte~ equivale a 8 bits
   + Para generar el árbol usamos de referencia
     - el ~0~ son _lecturas hacia la izq._ del árbol
     - el ~1~ son _lecturas hacia la der._ del árbol
   + En función del árbol se obtiene los caracteres originales

   #+BEGIN_QUOTE
   Para descomprimir el archivo, se necesita
   1. la tabla de frecuencia (/que está ordenada descendente por la cant. de repeticiones/)
   2. y su representación computacional (/el nuevo alfabeto codificado en binario 000111001001011110000100/)
   #+END_QUOTE

   La siguiente sería la *tabla de frecuencia*

   #+NAME: vector-tabla-de-frecuencia
   |---+---+---+---+---|
   | E | N | U |   | Q |
   |---+---+---+---+---|
   | 3 | 3 | 2 | 1 | 1 |
   |---+---+---+---+---|

   y los siguiente la representación computacional de nuevo alfabeto codificado en binario
   (/éste binario le fatan 2 bytes al final para ser múltiplo de 8 bits/)

   #+NAME: representacion-computacional
   |--------------------+----+----+-----+----+----+----+-----+----+----+----|
   | Posicion (en bits) | 00 | 01 | 110 | 01 | 00 | 10 | 111 | 10 | 00 | 01 |
   |--------------------+----+----+-----+----+----+----+-----+----+----+----|
   | caracter leido     |  E |  N |     |  N |  E |  U |   Q |  U |  E |  N |
   |--------------------+----+----+-----+----+----+----+-----+----+----+----|
** Condiciones a tener en cuenta
   - Se debe guardar el vector (/la tabla de frecuencia/) en el archivo comprimido
   - Determinar donde finaliza el vector (/se determina por la cant. de repeticiones de los caracteres/)
   - Identificar los caracteres *EOF* (ó *end of file* que es un ~short~ de ~2 Bytes~)

   #+BEGIN_QUOTE
   Si al comprimir un archivo se trata de leer el archivo hasta un *EOF* se puede llegar a tener problemas,
   porque estos son un conjunto de caracteres y en archivos grandes se pueden llegar a generar varios *EOF*.

   Los programas que comprimen leen hasta que se termina el archivo, NO revisan si es un *EOF*
   #+END_QUOTE
** Conceptos de AyED (por EOF)
*** Archivos - Modo de lectura/escritura
    - Existe sólo un tipo de archivo, cuando lo abrimos solo indicamos de que manera lo vamos a leer
    - Cuando en ~C~ abrimos un archivo con ~fopen~ sólo indicamos el "COMO" lo abrimos, pero NO el tipo del archivo
      - ~rb~ para leerlo en modo binario
      - ~r~ para leerlo modo de texto plano
*** Secuencia de Escape
    - Una *secuencia de escape* está representado por 2 caracteres (/cada uno del tipo ~char~ que equivalen a ~1 Byte~./)
      1. un caracter ~\~ slash invertido
      2. otro caracter (/luego del slash invertido/)
    - Cada *secuencia de escape* equivale a un entero del tipo ~short~ que equivalen a ~2 Bytes~

    #+BEGIN_QUOTE
    Si tenemos un salto de línea ~\n~ son dos caracteres el ~\~ y el ~n~
    El fin de un archivo ~\0~ también son dos caracteres ~\~ y el ~0~
    #+END_QUOTE
*** Archivo en Modo Binario/Texto
    Según el "modo" en que abramos un archivo
    + En _modo binario_:
      - archivo NO interpreta las *secuencias de escape* ni los *caracteres de control*
    + En _modo texto_:
      - archivo interpreta las *secuencias de escape* ni los *caracteres de control*
        (/Ej. NO muestra la secuencia de escape de salto de linea ~\n~ lo interpreta y hace el salto/)
* Compresión multimedia
  - Se modifica su *codificación*
  - Se _recodifica la codificación_ de la *resolución* ó *definición* (/bajando la calidad/)
    - *Resolución:* es la _cantidad de pixeles activos_ en resolución gráfica
    - *Definicion:* es la _cantidad de colores para representar los pixeles activos_
* Tiempo de Compresión Vs. Descompresión
  La compresión tarda más que la descompresión, porque al comprimir lee el archivo 2 veces

  _Al comprimir_: (/hace dos lecturas de disco/) 
  1. Lee el archivo para armar el vector (/la tabla de frecuencia/)
  2. Lee de nuevo el archivo para comprimir (/genera una abstracción de un árbol binario para generar la codificación en binario/)

  _Al descomprimir_:
  1. Lee del archivo comprimido la *codificación en binario* usando de referencia la *tabla de frecuencia* y graba el descomprimido
* Referencias Web
   1. https://resources.nerdfirst.net/huffman.html
   2. https://people.ok.ubc.ca/ylucet/DS/Huffman.html
   3. https://es.wikipedia.org/wiki/Suma_de_verificaci%C3%B3n
   4. https://www.vozidea.com/verificar-integridad-de-archivos-en-linux
