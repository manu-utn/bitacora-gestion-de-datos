#+TITLE: Clase 06 - Compresión

+ Fecha PARCIAL TEORICO: 28 de junio
+ Fecha PARCIAL PRACTICO: 

EN NEUQUEN

Pag 7 y 9
|--------------------+----+----+-----+----+----+----+-----+----+----+----|
| Posicion (en bits) | 00 | 01 | 110 | 01 | 00 | 10 | 111 | 10 | 00 | 01 |
|--------------------+----+----+-----+----+----+----+-----+----+----+----|
| caracter leido     |  E |  N |     |  N |  E |  U |   Q |  U |  E |  N |
|--------------------+----+----+-----+----+----+----+-----+----+----+----|

0: izq
1: der
Compresión de los datos en disco

#+BEGIN_COMMENT
DUDAS
Pag. 12: porque no se comprimen al ser archivos muy pequeños?
el programa no lo comprime ó por costumbre dice?
Pag. 9: Como seria eso de "apagar" potencias?
Pag. 10: diferencias incompensables que.?
#+END_COMMENT

* Referencias
** checksum y crc
   habla de esto en la pag. 4 de integridad/encriptación
   1. https://es.wikipedia.org/wiki/Suma_de_verificaci%C3%B3n
   2. https://www.vozidea.com/verificar-integridad-de-archivos-en-linux

* TIpos de compresion
** Con perdida 
   - se pierde algo de información, que no se puede recuperar
   - cuando la unica forma de comprimir/achicar, es perder algo de informacion
   (Ej. en multimedia suele suceder, con el audio/video con la codificación y recodificación)
** SIn pedida
   - cuando usamos programas como winzip,winrar, no tiene perdida de informacion
* Como es posible
  EL alfabeto *ascii* cada caracter de este pesa 1 byte osea 8 bits
  tiene como limitante que su longitud es de 1 
* ALgoritmo de huffman
  + es un algoritmo sin pérdida
  + caracteres de longitud variable
  + evalua la repetición
  + se crea una tabla de *frecuencia* para saber (cuantas veces lo usas)
  + cuando se creó, se agregaron caracteres de más (Ej. caritas, ..)
    porque no alcanzaba a tener 8 bytes
* Proceso de compresión
  - Se ordenan los caracteres de mayor a menor, según la cant. de veces que se repiten
    (le da prioridad a los que más se repitan)
  - se arma un árbol (porque es mas...) lo más desbalanceado posible
    porque a más balanceado..
  - se genera el árbol para cambiar el alfabeto de representación en el mismo orden que aparecia
    quedando un vector con binarios, luego itera sobre ese vector de binarios.
    (se lee mas rapido, porque es lo q usa la computadora los 0 y 1)

  #+BEGIN_EXAMPLE
  EN NEUQUEN

  Lo pasa a un vector: ENU''Q
  porque E es e que más se repite, luego la N, y asi..
  apareciendo en el vector la cant. de repeticiones por caracter

  Luego a traves de un algoritmo (ej. hoffman) cambia el alfabeto de representación
  a traves de un árbol desbalanceado, quedando luego un vector
  dl tipo: 001:010:100:... 
  #+END_EXAMPLE
* Condiciones a tener en cuenta
  + Se puede tener problemas con el *EOF* porque es un conjunto de caracteres
    y la idea del fin de archivo en realidad se determina cuando se terminó
     
* otros
  la compresión tarda más, porque lee el archivo 2 veces
  1ro para identificar los caracteres repetidos
  2do para ..
   
* compresión multimedia
  se achica la *resolución* ó *definición*
  - resolucion es la cant. de bytes
  - definicion es la 
